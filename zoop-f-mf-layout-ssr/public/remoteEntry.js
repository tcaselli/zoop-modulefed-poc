var layout;!function(){"use strict";var n,t,e,r,o,u={9162:function(n,t,e){var r={"./Title":function(){return e.e(864).then((function(){return function(){return e(2864)}}))}},o=function(n,t){return e.R=t,t=e.o(r,n)?r[n]():Promise.resolve().then((function(){throw new Error('Module "'+n+'" does not exist in container.')})),e.R=void 0,t},u=function(n,t){if(e.S){var r=e.S.default,o="default";if(r&&r!==n)throw new Error("Container initialization failed as it has already been initialized with a different share scope");return e.S[o]=n,e.I(o,t)}};e.d(t,{get:function(){return o},init:function(){return u}})}},i={};function f(n){var t=i[n];if(void 0!==t)return t.exports;var e=i[n]={exports:{}};return u[n](e,e.exports,f),e.exports}f.m=u,f.c=i,n=[],f.O=function(t,e,r,o){if(!e){var u=1/0;for(c=0;c<n.length;c++){e=n[c][0],r=n[c][1],o=n[c][2];for(var i=!0,a=0;a<e.length;a++)(!1&o||u>=o)&&Object.keys(f.O).every((function(n){return f.O[n](e[a])}))?e.splice(a--,1):(i=!1,o<u&&(u=o));i&&(n.splice(c--,1),t=r())}return t}o=o||0;for(var c=n.length;c>0&&n[c-1][2]>o;c--)n[c]=n[c-1];n[c]=[e,r,o]},f.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return f.d(t,{a:t}),t},f.d=function(n,t){for(var e in t)f.o(t,e)&&!f.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},f.f={},f.e=function(n){return Promise.all(Object.keys(f.f).reduce((function(t,e){return f.f[e](n,t),t}),[]))},f.u=function(n){return n+".bundle.js"},f.miniCssF=function(n){},f.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},t={},e="zoop-f-mf-layout-ssr:",f.l=function(n,r,o,u){if(t[n])t[n].push(r);else{var i,a;if(void 0!==o)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var s=c[l];if(s.getAttribute("src")==n||s.getAttribute("data-webpack")==e+o){i=s;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,f.nc&&i.setAttribute("nonce",f.nc),i.setAttribute("data-webpack",e+o),i.src=n),t[n]=[r];var p=function(e,r){i.onerror=i.onload=null,clearTimeout(d);var o=t[n];if(delete t[n],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((function(n){return n(r)})),e)return e(r)},d=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),a&&document.head.appendChild(i)}},f.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r={},o={},f.f.remotes=function(n,t){f.o(r,n)&&r[n].forEach((function(n){var e=f.R;e||(e=[]);var r=o[n];if(!(e.indexOf(r)>=0)){if(e.push(r),r.p)return t.push(r.p);var i=function(t){t||(t=new Error("Container missing")),"string"==typeof t.message&&(t.message+='\nwhile loading "'+r[1]+'" from '+r[2]),u[n]=function(){throw t},r.p=0},a=function(n,e,o,u,f,a){try{var c=n(e,o);if(!c||!c.then)return f(c,u,a);var l=c.then((function(n){return f(n,u)}),i);if(!a)return l;t.push(r.p=l)}catch(n){i(n)}},c=function(n,t,o){return a(t.get,r[1],e,0,l,o)},l=function(t){r.p=1,u[n]=function(n){n.exports=t()}};a(f,r[2],0,0,(function(n,t,e){return n?a(f.I,r[0],0,n,c,e):i()}),1)}}))},function(){f.S={};var n={},t={};f.I=function(e,r){r||(r=[]);var o=t[e];if(o||(o=t[e]={}),!(r.indexOf(o)>=0)){if(r.push(o),n[e])return n[e];f.o(f.S,e)||(f.S[e]={});var u=f.S[e],i="zoop-f-mf-layout-ssr",a=function(n,t,e,r){var o=u[n]=u[n]||{},f=o[t];(!f||!f.loaded&&(!r!=!f.eager?r:i>f.from))&&(o[t]={get:e,from:i,eager:!!r})},c=[];switch(e){case"default":a("react-dom","17.0.1",(function(){return function(){return f(3935)}}),1),a("react","17.0.1",(function(){return function(){return f(7294)}}),1)}return c.length?n[e]=Promise.all(c).then((function(){return n[e]=1})):n[e]=1}}}(),f.p="http://localhost:1900/",function(){var n=function(n){var t=function(n){return n.split(".").map((function(n){return+n==n?+n:n}))},e=/^([^-+]+)?(?:-([^+]+))?(?:\+(.+))?$/.exec(n),r=e[1]?t(e[1]):[];return e[2]&&(r.length++,r.push.apply(r,t(e[2]))),e[3]&&(r.push([]),r.push.apply(r,t(e[3]))),r},t=function(t,e){t=n(t),e=n(e);for(var r=0;;){if(r>=t.length)return r<e.length&&"u"!=(typeof e[r])[0];var o=t[r],u=(typeof o)[0];if(r>=e.length)return"u"==u;var i=e[r],f=(typeof i)[0];if(u!=f)return"o"==u&&"n"==f||"s"==f||"u"==u;if("o"!=u&&"u"!=u&&o!=i)return o<i;r++}},e=function(t,r){if(0 in t){r=n(r);var o=t[0],u=o<0;u&&(o=-o-1);for(var i=0,f=1,a=!0;;f++,i++){var c,l,s=f<t.length?(typeof t[f])[0]:"";if(i>=r.length||"o"==(l=(typeof(c=r[i]))[0]))return!a||("u"==s?f>o&&!u:""==s!=u);if("u"==l){if(!a||"u"!=s)return!1}else if(a)if(s==l)if(f<=o){if(c!=t[f])return!1}else{if(u?c>t[f]:c<t[f])return!1;c!=t[f]&&(a=!1)}else if("s"!=s&&"n"!=s){if(u||f<=o)return!1;a=!1,f--}else{if(f<=o||l<s!=u)return!1;a=!1}else"s"!=s&&"n"!=s&&(a=!1,f--)}}var p=[],d=p.pop.bind(p);for(i=1;i<t.length;i++){var h=t[i];p.push(1==h?d()|d():2==h?d()&d():h?e(h,r):!d())}return!!d()},r=function(n,r,o){var u=n[r];return(r=Object.keys(u).reduce((function(n,r){return e(o,r)&&(!n||t(n,r))?r:n}),0))&&u[r]},o=function(n){return n.loaded=1,n.get()},u=function(n){return function(t,e,r,o){var u=f.I(t);return u&&u.then?u.then(n.bind(n,t,f.S[t],e,r,o)):n(t,f.S[t],e,r,o)}},i=u((function(n,t,e,u,i){var a=t&&f.o(t,e)&&r(t,e,u);return a?o(a):i()})),a={},c={2751:function(){return i("default","react",[4,17,0,1],(function(){return function(){return f(7294)}}))}};[2751].forEach((function(n){f.m[n]=function(t){a[n]=0,delete f.c[n];var e=c[n]();if("function"!=typeof e)throw new Error("Shared module is not available for eager consumption: "+n);t.exports=e()}}));var l={};f.f.consumes=function(n,t){f.o(l,n)&&l[n].forEach((function(n){if(f.o(a,n))return t.push(a[n]);var e=function(t){a[n]=0,f.m[n]=function(e){delete f.c[n],e.exports=t()}},r=function(t){delete a[n],f.m[n]=function(e){throw delete f.c[n],t}};try{var o=c[n]();o.then?t.push(a[n]=o.then(e).catch(r)):e(o)}catch(n){r(n)}}))}}(),function(){var n={225:0};f.f.j=function(t,e){var r=f.o(n,t)?n[t]:void 0;if(0!==r)if(r)e.push(r[2]);else{var o=new Promise((function(e,o){r=n[t]=[e,o]}));e.push(r[2]=o);var u=f.p+f.u(t),i=new Error;f.l(u,(function(e){if(f.o(n,t)&&(0!==(r=n[t])&&(n[t]=void 0),r)){var o=e&&("load"===e.type?"missing":e.type),u=e&&e.target&&e.target.src;i.message="Loading chunk "+t+" failed.\n("+o+": "+u+")",i.name="ChunkLoadError",i.type=o,i.request=u,r[1](i)}}),"chunk-"+t,t)}},f.O.j=function(t){return 0===n[t]};var t=function(t,e){var r,o,u=e[0],i=e[1],a=e[2],c=0;for(r in i)f.o(i,r)&&(f.m[r]=i[r]);for(a&&a(f),t&&t(e);c<u.length;c++)o=u[c],f.o(n,o)&&n[o]&&n[o][0](),n[u[c]]=0;f.O()},e=this.webpackChunkzoop_f_mf_layout_ssr=this.webpackChunkzoop_f_mf_layout_ssr||[];e.forEach(t.bind(null,0)),e.push=t.bind(null,e.push.bind(e))}();var a=f.O(void 0,[216],(function(){return f(9162)}));a=f.O(a),layout=a}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96b29wLWYtbWYtbGF5b3V0LXNzci93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3pvb3AtZi1tZi1sYXlvdXQtc3NyL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly96b29wLWYtbWYtbGF5b3V0LXNzci93ZWJwYWNrL3J1bnRpbWUvcmVtb3RlcyBsb2FkaW5nIiwid2VicGFjazovL3pvb3AtZi1tZi1sYXlvdXQtc3NyL3dlYnBhY2svY29udGFpbmVyLWVudHJ5Iiwid2VicGFjazovL3pvb3AtZi1tZi1sYXlvdXQtc3NyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3pvb3AtZi1tZi1sYXlvdXQtc3NyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3pvb3AtZi1tZi1sYXlvdXQtc3NyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly96b29wLWYtbWYtbGF5b3V0LXNzci93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL3pvb3AtZi1tZi1sYXlvdXQtc3NyL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly96b29wLWYtbWYtbGF5b3V0LXNzci93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3pvb3AtZi1tZi1sYXlvdXQtc3NyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vem9vcC1mLW1mLWxheW91dC1zc3Ivd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly96b29wLWYtbWYtbGF5b3V0LXNzci93ZWJwYWNrL3J1bnRpbWUvc2hhcmluZyIsIndlYnBhY2s6Ly96b29wLWYtbWYtbGF5b3V0LXNzci93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly96b29wLWYtbWYtbGF5b3V0LXNzci93ZWJwYWNrL3J1bnRpbWUvY29uc3VtZXMiLCJ3ZWJwYWNrOi8vem9vcC1mLW1mLWxheW91dC1zc3Ivd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vem9vcC1mLW1mLWxheW91dC1zc3Ivd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbImRlZmVycmVkIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiY2h1bmtNYXBwaW5nIiwiaWRUb0V4dGVybmFsQW5kTmFtZU1hcHBpbmciLCJtb2R1bGVNYXAiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZSIsInRoZW4iLCJnZXQiLCJtb2R1bGUiLCJnZXRTY29wZSIsIlIiLCJvIiwiUHJvbWlzZSIsInJlc29sdmUiLCJFcnJvciIsInVuZGVmaW5lZCIsImluaXQiLCJzaGFyZVNjb3BlIiwiaW5pdFNjb3BlIiwiUyIsIm9sZFNjb3BlIiwibmFtZSIsIkkiLCJkIiwiZXhwb3J0cyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJjIiwiTyIsInJlc3VsdCIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiaSIsImxlbmd0aCIsImZ1bGZpbGxlZCIsImoiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJrZXkiLCJzcGxpY2UiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImEiLCJkZWZpbml0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZiIsImNodW5rSWQiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJtaW5pQ3NzRiIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJsIiwidXJsIiwiZG9uZSIsInB1c2giLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzIiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJmb3JFYWNoIiwic2V0VGltZW91dCIsImJpbmQiLCJ0eXBlIiwidGFyZ2V0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJyZW1vdGVzIiwiaWQiLCJkYXRhIiwiaW5kZXhPZiIsInAiLCJvbkVycm9yIiwiZXJyb3IiLCJtZXNzYWdlIiwiaGFuZGxlRnVuY3Rpb24iLCJhcmcxIiwiYXJnMiIsIm5leHQiLCJmaXJzdCIsInByb21pc2UiLCJvbkluaXRpYWxpemVkIiwiXyIsImV4dGVybmFsIiwib25GYWN0b3J5IiwiZmFjdG9yeSIsImluaXRQcm9taXNlcyIsImluaXRUb2tlbnMiLCJpbml0VG9rZW4iLCJzY29wZSIsInVuaXF1ZU5hbWUiLCJyZWdpc3RlciIsInZlcnNpb24iLCJlYWdlciIsInZlcnNpb25zIiwiYWN0aXZlVmVyc2lvbiIsImxvYWRlZCIsImZyb20iLCJwYXJzZVZlcnNpb24iLCJzdHIiLCJzcGxpdCIsIm1hcCIsImV4ZWMiLCJhcHBseSIsInZlcnNpb25MdCIsImIiLCJ0Iiwic2F0aXNmeSIsInJhbmdlIiwiZyIsInBvcCIsImZpbmRWYWxpZFZlcnNpb24iLCJyZXF1aXJlZFZlcnNpb24iLCJlbnRyeSIsInNjb3BlTmFtZSIsImxvYWRTdHJpY3RWZXJzaW9uQ2hlY2tGYWxsYmFjayIsImZhbGxiYWNrIiwiaW5zdGFsbGVkTW9kdWxlcyIsIm1vZHVsZVRvSGFuZGxlck1hcHBpbmciLCIyNzUxIiwiY29uc3VtZXMiLCJjYXRjaCIsImluc3RhbGxlZENodW5rcyIsIjIyNSIsImluc3RhbGxlZENodW5rRGF0YSIsInJlamVjdCIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInRoaXMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoid0NBQUlBLEVDQUFDLEVBQ0FDLEVDREFDLEVBQ0FDLEUsd0JDREosSUFBSUMsRUFBWSxDQUNmLFVBQVcsV0FDVixPQUFPQyxFQUFvQkMsRUFBRSxLQUFLQyxNQUFLLFdBQWEsT0FBTyxXQUFhLE9BQVFGLEVBQW9CLFlBR2xHRyxFQUFNLFNBQVNDLEVBQVFDLEdBVTFCLE9BVEFMLEVBQW9CTSxFQUFJRCxFQUN4QkEsRUFDQ0wsRUFBb0JPLEVBQUVSLEVBQVdLLEdBQzlCTCxFQUFVSyxLQUNWSSxRQUFRQyxVQUFVUCxNQUFLLFdBQ3hCLE1BQU0sSUFBSVEsTUFBTSxXQUFhTixFQUFTLHFDQUd6Q0osRUFBb0JNLE9BQUlLLEVBQ2pCTixHQUVKTyxFQUFPLFNBQVNDLEVBQVlDLEdBQy9CLEdBQUtkLEVBQW9CZSxFQUF6QixDQUNBLElBQUlDLEVBQVdoQixFQUFvQmUsRUFBVyxRQUMxQ0UsRUFBTyxVQUNYLEdBQUdELEdBQVlBLElBQWFILEVBQVksTUFBTSxJQUFJSCxNQUFNLG1HQUV4RCxPQURBVixFQUFvQmUsRUFBRUUsR0FBUUosRUFDdkJiLEVBQW9Ca0IsRUFBRUQsRUFBTUgsS0FJcENkLEVBQW9CbUIsRUFBRUMsRUFBUyxDQUM5QmpCLElBQUssV0FBYSxPQUFPQSxHQUN6QlMsS0FBTSxXQUFhLE9BQU9BLE9DNUJ2QlMsRUFBMkIsR0FHL0IsU0FBU3JCLEVBQW9Cc0IsR0FFNUIsSUFBSUMsRUFB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YTdJLEtBQ3JDdEIsRUFBb0J5QixFQUFFSCxHQUFZNkksRUFBWTdJLElBS2hELElBRkc4SSxHQUFTQSxFQUFRcEssR0FDakJrSyxHQUE0QkEsRUFBMkI3RCxHQUNyRG5FLEVBQUlMLEVBQVNNLE9BQVFELElBQ3pCaUIsRUFBVXRCLEVBQVNLLEdBQ2hCbEMsRUFBb0JPLEVBQUVtSixFQUFpQnZHLElBQVl1RyxFQUFnQnZHLElBQ3JFdUcsRUFBZ0J2RyxHQUFTLEtBRTFCdUcsRUFBZ0I3SCxFQUFTSyxJQUFNLEVBRWhDbEMsRUFBb0IyQixLQUdqQjBJLEVBQXFCQyxLQUF1QyxpQ0FBSUEsS0FBdUMsa0NBQUssR0FDaEhELEVBQW1CN0UsUUFBUXlFLEVBQXFCdkUsS0FBSyxLQUFNLElBQzNEMkUsRUFBbUJwRyxLQUFPZ0csRUFBcUJ2RSxLQUFLLEtBQU0yRSxFQUFtQnBHLEtBQUt5QixLQUFLMkUsSSxHQ3BGdkYsSUFBSUUsRUFBc0J2SyxFQUFvQjJCLE9BQUVoQixFQUFXLENBQUMsTUFBTSxXQUFhLE9BQU9YLEVBQW9CLFNBQzFHdUssRUFBc0J2SyxFQUFvQjJCLEVBQUU0SSxHIiwiZmlsZSI6InJlbW90ZUVudHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSBmdW5jdGlvbihyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpIHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGNodW5rSWRzID0gZGVmZXJyZWRbaV1bMF07XG5cdFx0dmFyIGZuID0gZGVmZXJyZWRbaV1bMV07XG5cdFx0dmFyIHByaW9yaXR5ID0gZGVmZXJyZWRbaV1bMl07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pOyB9KSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHJlc3VsdCA9IGZuKCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcInpvb3AtZi1tZi1sYXlvdXQtc3NyOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSBmdW5jdGlvbih1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gZnVuY3Rpb24ocHJldiwgZXZlbnQpIHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7IHJldHVybiBmbihldmVudCk7IH0pO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHQ7XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsInZhciBjaHVua01hcHBpbmcgPSB7fTtcbnZhciBpZFRvRXh0ZXJuYWxBbmROYW1lTWFwcGluZyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5mLnJlbW90ZXMgPSBmdW5jdGlvbihjaHVua0lkLCBwcm9taXNlcykge1xuXHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY2h1bmtNYXBwaW5nLCBjaHVua0lkKSkge1xuXHRcdGNodW5rTWFwcGluZ1tjaHVua0lkXS5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XG5cdFx0XHR2YXIgZ2V0U2NvcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLlI7XG5cdFx0XHRpZighZ2V0U2NvcGUpIGdldFNjb3BlID0gW107XG5cdFx0XHR2YXIgZGF0YSA9IGlkVG9FeHRlcm5hbEFuZE5hbWVNYXBwaW5nW2lkXTtcblx0XHRcdGlmKGdldFNjb3BlLmluZGV4T2YoZGF0YSkgPj0gMCkgcmV0dXJuO1xuXHRcdFx0Z2V0U2NvcGUucHVzaChkYXRhKTtcblx0XHRcdGlmKGRhdGEucCkgcmV0dXJuIHByb21pc2VzLnB1c2goZGF0YS5wKTtcblx0XHRcdHZhciBvbkVycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoIWVycm9yKSBlcnJvciA9IG5ldyBFcnJvcihcIkNvbnRhaW5lciBtaXNzaW5nXCIpO1xuXHRcdFx0XHRpZih0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gXCJzdHJpbmdcIilcblx0XHRcdFx0XHRlcnJvci5tZXNzYWdlICs9ICdcXG53aGlsZSBsb2FkaW5nIFwiJyArIGRhdGFbMV0gKyAnXCIgZnJvbSAnICsgZGF0YVsyXTtcblx0XHRcdFx0X193ZWJwYWNrX21vZHVsZXNfX1tpZF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhLnAgPSAwO1xuXHRcdFx0fTtcblx0XHRcdHZhciBoYW5kbGVGdW5jdGlvbiA9IGZ1bmN0aW9uKGZuLCBhcmcxLCBhcmcyLCBkLCBuZXh0LCBmaXJzdCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBwcm9taXNlID0gZm4oYXJnMSwgYXJnMik7XG5cdFx0XHRcdFx0aWYocHJvbWlzZSAmJiBwcm9taXNlLnRoZW4pIHtcblx0XHRcdFx0XHRcdHZhciBwID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkgeyByZXR1cm4gbmV4dChyZXN1bHQsIGQpOyB9LCBvbkVycm9yKTtcblx0XHRcdFx0XHRcdGlmKGZpcnN0KSBwcm9taXNlcy5wdXNoKGRhdGEucCA9IHApOyBlbHNlIHJldHVybiBwO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbmV4dChwcm9taXNlLCBkLCBmaXJzdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoKGVycm9yKSB7XG5cdFx0XHRcdFx0b25FcnJvcihlcnJvcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHZhciBvbkV4dGVybmFsID0gZnVuY3Rpb24oZXh0ZXJuYWwsIF8sIGZpcnN0KSB7IHJldHVybiBleHRlcm5hbCA/IGhhbmRsZUZ1bmN0aW9uKF9fd2VicGFja19yZXF1aXJlX18uSSwgZGF0YVswXSwgMCwgZXh0ZXJuYWwsIG9uSW5pdGlhbGl6ZWQsIGZpcnN0KSA6IG9uRXJyb3IoKTsgfTtcblx0XHRcdHZhciBvbkluaXRpYWxpemVkID0gZnVuY3Rpb24oXywgZXh0ZXJuYWwsIGZpcnN0KSB7IHJldHVybiBoYW5kbGVGdW5jdGlvbihleHRlcm5hbC5nZXQsIGRhdGFbMV0sIGdldFNjb3BlLCAwLCBvbkZhY3RvcnksIGZpcnN0KTsgfTtcblx0XHRcdHZhciBvbkZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG5cdFx0XHRcdGRhdGEucCA9IDE7XG5cdFx0XHRcdF9fd2VicGFja19tb2R1bGVzX19baWRdID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdFx0XHRcdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRoYW5kbGVGdW5jdGlvbihfX3dlYnBhY2tfcmVxdWlyZV9fLCBkYXRhWzJdLCAwLCAwLCBvbkV4dGVybmFsLCAxKTtcblx0XHR9KTtcblx0fVxufSIsInZhciBtb2R1bGVNYXAgPSB7XG5cdFwiLi9UaXRsZVwiOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKDg2NCkudGhlbihmdW5jdGlvbigpIHsgcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gKF9fd2VicGFja19yZXF1aXJlX18oMjg2NCkpOyB9OyB9KTtcblx0fVxufTtcbnZhciBnZXQgPSBmdW5jdGlvbihtb2R1bGUsIGdldFNjb3BlKSB7XG5cdF9fd2VicGFja19yZXF1aXJlX18uUiA9IGdldFNjb3BlO1xuXHRnZXRTY29wZSA9IChcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9kdWxlTWFwLCBtb2R1bGUpXG5cdFx0XHQ/IG1vZHVsZU1hcFttb2R1bGVdKClcblx0XHRcdDogUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNb2R1bGUgXCInICsgbW9kdWxlICsgJ1wiIGRvZXMgbm90IGV4aXN0IGluIGNvbnRhaW5lci4nKTtcblx0XHRcdH0pXG5cdCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uUiA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGdldFNjb3BlO1xufTtcbnZhciBpbml0ID0gZnVuY3Rpb24oc2hhcmVTY29wZSwgaW5pdFNjb3BlKSB7XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5TKSByZXR1cm47XG5cdHZhciBvbGRTY29wZSA9IF9fd2VicGFja19yZXF1aXJlX18uU1tcImRlZmF1bHRcIl07XG5cdHZhciBuYW1lID0gXCJkZWZhdWx0XCJcblx0aWYob2xkU2NvcGUgJiYgb2xkU2NvcGUgIT09IHNoYXJlU2NvcGUpIHRocm93IG5ldyBFcnJvcihcIkNvbnRhaW5lciBpbml0aWFsaXphdGlvbiBmYWlsZWQgYXMgaXQgaGFzIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZCB3aXRoIGEgZGlmZmVyZW50IHNoYXJlIHNjb3BlXCIpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLlNbbmFtZV0gPSBzaGFyZVNjb3BlO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5JKG5hbWUsIGluaXRTY29wZSk7XG59O1xuXG4vLyBUaGlzIGV4cG9ydHMgZ2V0dGVycyB0byBkaXNhbGxvdyBtb2RpZmljYXRpb25zXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQoZXhwb3J0cywge1xuXHRnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZ2V0OyB9LFxuXHRpbml0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGluaXQ7IH1cbn0pOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKGZ1bmN0aW9uKHByb21pc2VzLCBrZXkpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmJ1bmRsZS5qc1wiO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIHVuZGVmaW5lZDtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5TID0ge307XG52YXIgaW5pdFByb21pc2VzID0ge307XG52YXIgaW5pdFRva2VucyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5JID0gZnVuY3Rpb24obmFtZSwgaW5pdFNjb3BlKSB7XG5cdGlmKCFpbml0U2NvcGUpIGluaXRTY29wZSA9IFtdO1xuXHQvLyBoYW5kbGluZyBjaXJjdWxhciBpbml0IGNhbGxzXG5cdHZhciBpbml0VG9rZW4gPSBpbml0VG9rZW5zW25hbWVdO1xuXHRpZighaW5pdFRva2VuKSBpbml0VG9rZW4gPSBpbml0VG9rZW5zW25hbWVdID0ge307XG5cdGlmKGluaXRTY29wZS5pbmRleE9mKGluaXRUb2tlbikgPj0gMCkgcmV0dXJuO1xuXHRpbml0U2NvcGUucHVzaChpbml0VG9rZW4pO1xuXHQvLyBvbmx5IHJ1bnMgb25jZVxuXHRpZihpbml0UHJvbWlzZXNbbmFtZV0pIHJldHVybiBpbml0UHJvbWlzZXNbbmFtZV07XG5cdC8vIGNyZWF0ZXMgYSBuZXcgc2hhcmUgc2NvcGUgaWYgbmVlZGVkXG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oX193ZWJwYWNrX3JlcXVpcmVfXy5TLCBuYW1lKSkgX193ZWJwYWNrX3JlcXVpcmVfXy5TW25hbWVdID0ge307XG5cdC8vIHJ1bnMgYWxsIGluaXQgc25pcHBldHMgZnJvbSBhbGwgbW9kdWxlcyByZWFjaGFibGVcblx0dmFyIHNjb3BlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5TW25hbWVdO1xuXHR2YXIgd2FybiA9IGZ1bmN0aW9uKG1zZykgeyByZXR1cm4gdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuICYmIGNvbnNvbGUud2Fybihtc2cpOyB9O1xuXHR2YXIgdW5pcXVlTmFtZSA9IFwiem9vcC1mLW1mLWxheW91dC1zc3JcIjtcblx0dmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgdmVyc2lvbiwgZmFjdG9yeSwgZWFnZXIpIHtcblx0XHR2YXIgdmVyc2lvbnMgPSBzY29wZVtuYW1lXSA9IHNjb3BlW25hbWVdIHx8IHt9O1xuXHRcdHZhciBhY3RpdmVWZXJzaW9uID0gdmVyc2lvbnNbdmVyc2lvbl07XG5cdFx0aWYoIWFjdGl2ZVZlcnNpb24gfHwgKCFhY3RpdmVWZXJzaW9uLmxvYWRlZCAmJiAoIWVhZ2VyICE9ICFhY3RpdmVWZXJzaW9uLmVhZ2VyID8gZWFnZXIgOiB1bmlxdWVOYW1lID4gYWN0aXZlVmVyc2lvbi5mcm9tKSkpIHZlcnNpb25zW3ZlcnNpb25dID0geyBnZXQ6IGZhY3RvcnksIGZyb206IHVuaXF1ZU5hbWUsIGVhZ2VyOiAhIWVhZ2VyIH07XG5cdH07XG5cdHZhciBpbml0RXh0ZXJuYWwgPSBmdW5jdGlvbihpZCkge1xuXHRcdHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uKGVycikgeyByZXR1cm4gd2FybihcIkluaXRpYWxpemF0aW9uIG9mIHNoYXJpbmcgZXh0ZXJuYWwgZmFpbGVkOiBcIiArIGVycik7IH07XG5cdFx0dHJ5IHtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcblx0XHRcdGlmKCFtb2R1bGUpIHJldHVybjtcblx0XHRcdHZhciBpbml0Rm4gPSBmdW5jdGlvbihtb2R1bGUpIHsgcmV0dXJuIG1vZHVsZSAmJiBtb2R1bGUuaW5pdCAmJiBtb2R1bGUuaW5pdChfX3dlYnBhY2tfcmVxdWlyZV9fLlNbbmFtZV0sIGluaXRTY29wZSk7IH1cblx0XHRcdGlmKG1vZHVsZS50aGVuKSByZXR1cm4gcHJvbWlzZXMucHVzaChtb2R1bGUudGhlbihpbml0Rm4sIGhhbmRsZUVycm9yKSk7XG5cdFx0XHR2YXIgaW5pdFJlc3VsdCA9IGluaXRGbihtb2R1bGUpO1xuXHRcdFx0aWYoaW5pdFJlc3VsdCAmJiBpbml0UmVzdWx0LnRoZW4pIHJldHVybiBwcm9taXNlcy5wdXNoKGluaXRSZXN1bHQuY2F0Y2goaGFuZGxlRXJyb3IpKTtcblx0XHR9IGNhdGNoKGVycikgeyBoYW5kbGVFcnJvcihlcnIpOyB9XG5cdH1cblx0dmFyIHByb21pc2VzID0gW107XG5cdHN3aXRjaChuYW1lKSB7XG5cdFx0Y2FzZSBcImRlZmF1bHRcIjoge1xuXHRcdFx0cmVnaXN0ZXIoXCJyZWFjdC1kb21cIiwgXCIxNy4wLjFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMzkzNSk7IH07IH0sIDEpO1xuXHRcdFx0cmVnaXN0ZXIoXCJyZWFjdFwiLCBcIjE3LjAuMVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mjk0KTsgfTsgfSwgMSk7XG5cdFx0fVxuXHRcdGJyZWFrO1xuXHR9XG5cdGlmKCFwcm9taXNlcy5sZW5ndGgpIHJldHVybiBpbml0UHJvbWlzZXNbbmFtZV0gPSAxO1xuXHRyZXR1cm4gaW5pdFByb21pc2VzW25hbWVdID0gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oKSB7IHJldHVybiBpbml0UHJvbWlzZXNbbmFtZV0gPSAxOyB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJodHRwOi8vbG9jYWxob3N0OjE5MDAvXCI7IiwidmFyIHBhcnNlVmVyc2lvbiA9IGZ1bmN0aW9uKHN0cikge1xuXHQvLyBzZWUgd2VicGFjay9saWIvdXRpbC9zZW12ZXIuanMgZm9yIG9yaWdpbmFsIGNvZGVcblx0dmFyIHA9ZnVuY3Rpb24ocCl7cmV0dXJuIHAuc3BsaXQoXCIuXCIpLm1hcCgoZnVuY3Rpb24ocCl7cmV0dXJuK3A9PXA/K3A6cH0pKX0sbj0vXihbXi0rXSspPyg/Oi0oW14rXSspKT8oPzpcXCsoLispKT8kLy5leGVjKHN0cikscj1uWzFdP3AoblsxXSk6W107cmV0dXJuIG5bMl0mJihyLmxlbmd0aCsrLHIucHVzaC5hcHBseShyLHAoblsyXSkpKSxuWzNdJiYoci5wdXNoKFtdKSxyLnB1c2guYXBwbHkocixwKG5bM10pKSkscjtcbn1cbnZhciB2ZXJzaW9uTHQgPSBmdW5jdGlvbihhLCBiKSB7XG5cdC8vIHNlZSB3ZWJwYWNrL2xpYi91dGlsL3NlbXZlci5qcyBmb3Igb3JpZ2luYWwgY29kZVxuXHRhPXBhcnNlVmVyc2lvbihhKSxiPXBhcnNlVmVyc2lvbihiKTtmb3IodmFyIHI9MDs7KXtpZihyPj1hLmxlbmd0aClyZXR1cm4gcjxiLmxlbmd0aCYmXCJ1XCIhPSh0eXBlb2YgYltyXSlbMF07dmFyIGU9YVtyXSxuPSh0eXBlb2YgZSlbMF07aWYocj49Yi5sZW5ndGgpcmV0dXJuXCJ1XCI9PW47dmFyIHQ9YltyXSxmPSh0eXBlb2YgdClbMF07aWYobiE9ZilyZXR1cm5cIm9cIj09biYmXCJuXCI9PWZ8fChcInNcIj09Znx8XCJ1XCI9PW4pO2lmKFwib1wiIT1uJiZcInVcIiE9biYmZSE9dClyZXR1cm4gZTx0O3IrK31cbn1cbnZhciByYW5nZVRvU3RyaW5nID0gZnVuY3Rpb24ocmFuZ2UpIHtcblx0Ly8gc2VlIHdlYnBhY2svbGliL3V0aWwvc2VtdmVyLmpzIGZvciBvcmlnaW5hbCBjb2RlXG5cdHZhciByPXJhbmdlWzBdLG49XCJcIjtpZigxPT09cmFuZ2UubGVuZ3RoKXJldHVyblwiKlwiO2lmKHIrLjUpe24rPTA9PXI/XCI+PVwiOi0xPT1yP1wiPFwiOjE9PXI/XCJeXCI6Mj09cj9cIn5cIjpyPjA/XCI9XCI6XCIhPVwiO2Zvcih2YXIgZT0xLGE9MTthPHJhbmdlLmxlbmd0aDthKyspe2UtLSxuKz1cInVcIj09KHR5cGVvZih0PXJhbmdlW2FdKSlbMF0/XCItXCI6KGU+MD9cIi5cIjpcIlwiKSsoZT0yLHQpfXJldHVybiBufXZhciBnPVtdO2ZvcihhPTE7YTxyYW5nZS5sZW5ndGg7YSsrKXt2YXIgdD1yYW5nZVthXTtnLnB1c2goMD09PXQ/XCJub3QoXCIrbygpK1wiKVwiOjE9PT10P1wiKFwiK28oKStcIiB8fCBcIitvKCkrXCIpXCI6Mj09PXQ/Zy5wb3AoKStcIiBcIitnLnBvcCgpOnJhbmdlVG9TdHJpbmcodCkpfXJldHVybiBvKCk7ZnVuY3Rpb24gbygpe3JldHVybiBnLnBvcCgpLnJlcGxhY2UoL15cXCgoLispXFwpJC8sXCIkMVwiKX1cbn1cbnZhciBzYXRpc2Z5ID0gZnVuY3Rpb24ocmFuZ2UsIHZlcnNpb24pIHtcblx0Ly8gc2VlIHdlYnBhY2svbGliL3V0aWwvc2VtdmVyLmpzIGZvciBvcmlnaW5hbCBjb2RlXG5cdGlmKDAgaW4gcmFuZ2Upe3ZlcnNpb249cGFyc2VWZXJzaW9uKHZlcnNpb24pO3ZhciBlPXJhbmdlWzBdLHI9ZTwwO3ImJihlPS1lLTEpO2Zvcih2YXIgbj0wLGk9MSxhPSEwOztpKyssbisrKXt2YXIgZixzLGc9aTxyYW5nZS5sZW5ndGg/KHR5cGVvZiByYW5nZVtpXSlbMF06XCJcIjtpZihuPj12ZXJzaW9uLmxlbmd0aHx8XCJvXCI9PShzPSh0eXBlb2YoZj12ZXJzaW9uW25dKSlbMF0pKXJldHVybiFhfHwoXCJ1XCI9PWc/aT5lJiYhcjpcIlwiPT1nIT1yKTtpZihcInVcIj09cyl7aWYoIWF8fFwidVwiIT1nKXJldHVybiExfWVsc2UgaWYoYSlpZihnPT1zKWlmKGk8PWUpe2lmKGYhPXJhbmdlW2ldKXJldHVybiExfWVsc2V7aWYocj9mPnJhbmdlW2ldOmY8cmFuZ2VbaV0pcmV0dXJuITE7ZiE9cmFuZ2VbaV0mJihhPSExKX1lbHNlIGlmKFwic1wiIT1nJiZcIm5cIiE9Zyl7aWYocnx8aTw9ZSlyZXR1cm4hMTthPSExLGktLX1lbHNle2lmKGk8PWV8fHM8ZyE9cilyZXR1cm4hMTthPSExfWVsc2VcInNcIiE9ZyYmXCJuXCIhPWcmJihhPSExLGktLSl9fXZhciB0PVtdLG89dC5wb3AuYmluZCh0KTtmb3Iobj0xO248cmFuZ2UubGVuZ3RoO24rKyl7dmFyIHU9cmFuZ2Vbbl07dC5wdXNoKDE9PXU/bygpfG8oKToyPT11P28oKSZvKCk6dT9zYXRpc2Z5KHUsdmVyc2lvbik6IW8oKSl9cmV0dXJuISFvKCk7XG59XG52YXIgZW5zdXJlRXhpc3RlbmNlID0gZnVuY3Rpb24oc2NvcGVOYW1lLCBrZXkpIHtcblx0dmFyIHNjb3BlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5TW3Njb3BlTmFtZV07XG5cdGlmKCFzY29wZSB8fCAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKHNjb3BlLCBrZXkpKSB0aHJvdyBuZXcgRXJyb3IoXCJTaGFyZWQgbW9kdWxlIFwiICsga2V5ICsgXCIgZG9lc24ndCBleGlzdCBpbiBzaGFyZWQgc2NvcGUgXCIgKyBzY29wZU5hbWUpO1xuXHRyZXR1cm4gc2NvcGU7XG59O1xudmFyIGZpbmRWZXJzaW9uID0gZnVuY3Rpb24oc2NvcGUsIGtleSkge1xuXHR2YXIgdmVyc2lvbnMgPSBzY29wZVtrZXldO1xuXHR2YXIga2V5ID0gT2JqZWN0LmtleXModmVyc2lvbnMpLnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XG5cdFx0cmV0dXJuICFhIHx8IHZlcnNpb25MdChhLCBiKSA/IGIgOiBhO1xuXHR9LCAwKTtcblx0cmV0dXJuIGtleSAmJiB2ZXJzaW9uc1trZXldXG59O1xudmFyIGZpbmRTaW5nbGV0b25WZXJzaW9uS2V5ID0gZnVuY3Rpb24oc2NvcGUsIGtleSkge1xuXHR2YXIgdmVyc2lvbnMgPSBzY29wZVtrZXldO1xuXHRyZXR1cm4gT2JqZWN0LmtleXModmVyc2lvbnMpLnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XG5cdFx0cmV0dXJuICFhIHx8ICghdmVyc2lvbnNbYV0ubG9hZGVkICYmIHZlcnNpb25MdChhLCBiKSkgPyBiIDogYTtcblx0fSwgMCk7XG59O1xudmFyIGdldEludmFsaWRTaW5nbGV0b25WZXJzaW9uTWVzc2FnZSA9IGZ1bmN0aW9uKGtleSwgdmVyc2lvbiwgcmVxdWlyZWRWZXJzaW9uKSB7XG5cdHJldHVybiBcIlVuc2F0aXNmaWVkIHZlcnNpb24gXCIgKyB2ZXJzaW9uICsgXCIgb2Ygc2hhcmVkIHNpbmdsZXRvbiBtb2R1bGUgXCIgKyBrZXkgKyBcIiAocmVxdWlyZWQgXCIgKyByYW5nZVRvU3RyaW5nKHJlcXVpcmVkVmVyc2lvbikgKyBcIilcIlxufTtcbnZhciBnZXRTaW5nbGV0b25WZXJzaW9uID0gZnVuY3Rpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCByZXF1aXJlZFZlcnNpb24pIHtcblx0dmFyIHZlcnNpb24gPSBmaW5kU2luZ2xldG9uVmVyc2lvbktleShzY29wZSwga2V5KTtcblx0aWYgKCFzYXRpc2Z5KHJlcXVpcmVkVmVyc2lvbiwgdmVyc2lvbikpIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2FybiAmJiBjb25zb2xlLndhcm4oZ2V0SW52YWxpZFNpbmdsZXRvblZlcnNpb25NZXNzYWdlKGtleSwgdmVyc2lvbiwgcmVxdWlyZWRWZXJzaW9uKSk7XG5cdHJldHVybiBnZXQoc2NvcGVba2V5XVt2ZXJzaW9uXSk7XG59O1xudmFyIGdldFN0cmljdFNpbmdsZXRvblZlcnNpb24gPSBmdW5jdGlvbihzY29wZSwgc2NvcGVOYW1lLCBrZXksIHJlcXVpcmVkVmVyc2lvbikge1xuXHR2YXIgdmVyc2lvbiA9IGZpbmRTaW5nbGV0b25WZXJzaW9uS2V5KHNjb3BlLCBrZXkpO1xuXHRpZiAoIXNhdGlzZnkocmVxdWlyZWRWZXJzaW9uLCB2ZXJzaW9uKSkgdGhyb3cgbmV3IEVycm9yKGdldEludmFsaWRTaW5nbGV0b25WZXJzaW9uTWVzc2FnZShrZXksIHZlcnNpb24sIHJlcXVpcmVkVmVyc2lvbikpO1xuXHRyZXR1cm4gZ2V0KHNjb3BlW2tleV1bdmVyc2lvbl0pO1xufTtcbnZhciBmaW5kVmFsaWRWZXJzaW9uID0gZnVuY3Rpb24oc2NvcGUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSB7XG5cdHZhciB2ZXJzaW9ucyA9IHNjb3BlW2tleV07XG5cdHZhciBrZXkgPSBPYmplY3Qua2V5cyh2ZXJzaW9ucykucmVkdWNlKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRpZiAoIXNhdGlzZnkocmVxdWlyZWRWZXJzaW9uLCBiKSkgcmV0dXJuIGE7XG5cdFx0cmV0dXJuICFhIHx8IHZlcnNpb25MdChhLCBiKSA/IGIgOiBhO1xuXHR9LCAwKTtcblx0cmV0dXJuIGtleSAmJiB2ZXJzaW9uc1trZXldXG59O1xudmFyIGdldEludmFsaWRWZXJzaW9uTWVzc2FnZSA9IGZ1bmN0aW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSB7XG5cdHZhciB2ZXJzaW9ucyA9IHNjb3BlW2tleV07XG5cdHJldHVybiBcIk5vIHNhdGlzZnlpbmcgdmVyc2lvbiAoXCIgKyByYW5nZVRvU3RyaW5nKHJlcXVpcmVkVmVyc2lvbikgKyBcIikgb2Ygc2hhcmVkIG1vZHVsZSBcIiArIGtleSArIFwiIGZvdW5kIGluIHNoYXJlZCBzY29wZSBcIiArIHNjb3BlTmFtZSArIFwiLlxcblwiICtcblx0XHRcIkF2YWlsYWJsZSB2ZXJzaW9uczogXCIgKyBPYmplY3Qua2V5cyh2ZXJzaW9ucykubWFwKGZ1bmN0aW9uKGtleSkge1xuXHRcdHJldHVybiBrZXkgKyBcIiBmcm9tIFwiICsgdmVyc2lvbnNba2V5XS5mcm9tO1xuXHR9KS5qb2luKFwiLCBcIik7XG59O1xudmFyIGdldFZhbGlkVmVyc2lvbiA9IGZ1bmN0aW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSB7XG5cdHZhciBlbnRyeSA9IGZpbmRWYWxpZFZlcnNpb24oc2NvcGUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKTtcblx0aWYoZW50cnkpIHJldHVybiBnZXQoZW50cnkpO1xuXHR0aHJvdyBuZXcgRXJyb3IoZ2V0SW52YWxpZFZlcnNpb25NZXNzYWdlKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSk7XG59O1xudmFyIHdhcm5JbnZhbGlkVmVyc2lvbiA9IGZ1bmN0aW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSB7XG5cdHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2FybiAmJiBjb25zb2xlLndhcm4oZ2V0SW52YWxpZFZlcnNpb25NZXNzYWdlKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSk7XG59O1xudmFyIGdldCA9IGZ1bmN0aW9uKGVudHJ5KSB7XG5cdGVudHJ5LmxvYWRlZCA9IDE7XG5cdHJldHVybiBlbnRyeS5nZXQoKVxufTtcbnZhciBpbml0ID0gZnVuY3Rpb24oZm4pIHsgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlTmFtZSwgYSwgYiwgYykge1xuXHR2YXIgcHJvbWlzZSA9IF9fd2VicGFja19yZXF1aXJlX18uSShzY29wZU5hbWUpO1xuXHRpZiAocHJvbWlzZSAmJiBwcm9taXNlLnRoZW4pIHJldHVybiBwcm9taXNlLnRoZW4oZm4uYmluZChmbiwgc2NvcGVOYW1lLCBfX3dlYnBhY2tfcmVxdWlyZV9fLlNbc2NvcGVOYW1lXSwgYSwgYiwgYykpO1xuXHRyZXR1cm4gZm4oc2NvcGVOYW1lLCBfX3dlYnBhY2tfcmVxdWlyZV9fLlNbc2NvcGVOYW1lXSwgYSwgYiwgYyk7XG59OyB9O1xuXG52YXIgbG9hZCA9IC8qI19fUFVSRV9fKi8gaW5pdChmdW5jdGlvbihzY29wZU5hbWUsIHNjb3BlLCBrZXkpIHtcblx0ZW5zdXJlRXhpc3RlbmNlKHNjb3BlTmFtZSwga2V5KTtcblx0cmV0dXJuIGdldChmaW5kVmVyc2lvbihzY29wZSwga2V5KSk7XG59KTtcbnZhciBsb2FkRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoZnVuY3Rpb24oc2NvcGVOYW1lLCBzY29wZSwga2V5LCBmYWxsYmFjaykge1xuXHRyZXR1cm4gc2NvcGUgJiYgX193ZWJwYWNrX3JlcXVpcmVfXy5vKHNjb3BlLCBrZXkpID8gZ2V0KGZpbmRWZXJzaW9uKHNjb3BlLCBrZXkpKSA6IGZhbGxiYWNrKCk7XG59KTtcbnZhciBsb2FkVmVyc2lvbkNoZWNrID0gLyojX19QVVJFX18qLyBpbml0KGZ1bmN0aW9uKHNjb3BlTmFtZSwgc2NvcGUsIGtleSwgdmVyc2lvbikge1xuXHRlbnN1cmVFeGlzdGVuY2Uoc2NvcGVOYW1lLCBrZXkpO1xuXHRyZXR1cm4gZ2V0KGZpbmRWYWxpZFZlcnNpb24oc2NvcGUsIGtleSwgdmVyc2lvbikgfHwgd2FybkludmFsaWRWZXJzaW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgdmVyc2lvbikgfHwgZmluZFZlcnNpb24oc2NvcGUsIGtleSkpO1xufSk7XG52YXIgbG9hZFNpbmdsZXRvblZlcnNpb25DaGVjayA9IC8qI19fUFVSRV9fKi8gaW5pdChmdW5jdGlvbihzY29wZU5hbWUsIHNjb3BlLCBrZXksIHZlcnNpb24pIHtcblx0ZW5zdXJlRXhpc3RlbmNlKHNjb3BlTmFtZSwga2V5KTtcblx0cmV0dXJuIGdldFNpbmdsZXRvblZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKTtcbn0pO1xudmFyIGxvYWRTdHJpY3RWZXJzaW9uQ2hlY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoZnVuY3Rpb24oc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uKSB7XG5cdGVuc3VyZUV4aXN0ZW5jZShzY29wZU5hbWUsIGtleSk7XG5cdHJldHVybiBnZXRWYWxpZFZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKTtcbn0pO1xudmFyIGxvYWRTdHJpY3RTaW5nbGV0b25WZXJzaW9uQ2hlY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoZnVuY3Rpb24oc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uKSB7XG5cdGVuc3VyZUV4aXN0ZW5jZShzY29wZU5hbWUsIGtleSk7XG5cdHJldHVybiBnZXRTdHJpY3RTaW5nbGV0b25WZXJzaW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgdmVyc2lvbik7XG59KTtcbnZhciBsb2FkVmVyc2lvbkNoZWNrRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoZnVuY3Rpb24oc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uLCBmYWxsYmFjaykge1xuXHRpZighc2NvcGUgfHwgIV9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSkgcmV0dXJuIGZhbGxiYWNrKCk7XG5cdHJldHVybiBnZXQoZmluZFZhbGlkVmVyc2lvbihzY29wZSwga2V5LCB2ZXJzaW9uKSB8fCB3YXJuSW52YWxpZFZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKSB8fCBmaW5kVmVyc2lvbihzY29wZSwga2V5KSk7XG59KTtcbnZhciBsb2FkU2luZ2xldG9uVmVyc2lvbkNoZWNrRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoZnVuY3Rpb24oc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uLCBmYWxsYmFjaykge1xuXHRpZighc2NvcGUgfHwgIV9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSkgcmV0dXJuIGZhbGxiYWNrKCk7XG5cdHJldHVybiBnZXRTaW5nbGV0b25WZXJzaW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgdmVyc2lvbik7XG59KTtcbnZhciBsb2FkU3RyaWN0VmVyc2lvbkNoZWNrRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoZnVuY3Rpb24oc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uLCBmYWxsYmFjaykge1xuXHR2YXIgZW50cnkgPSBzY29wZSAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oc2NvcGUsIGtleSkgJiYgZmluZFZhbGlkVmVyc2lvbihzY29wZSwga2V5LCB2ZXJzaW9uKTtcblx0cmV0dXJuIGVudHJ5ID8gZ2V0KGVudHJ5KSA6IGZhbGxiYWNrKCk7XG59KTtcbnZhciBsb2FkU3RyaWN0U2luZ2xldG9uVmVyc2lvbkNoZWNrRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoZnVuY3Rpb24oc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uLCBmYWxsYmFjaykge1xuXHRpZighc2NvcGUgfHwgIV9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSkgcmV0dXJuIGZhbGxiYWNrKCk7XG5cdHJldHVybiBnZXRTdHJpY3RTaW5nbGV0b25WZXJzaW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgdmVyc2lvbik7XG59KTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG52YXIgbW9kdWxlVG9IYW5kbGVyTWFwcGluZyA9IHtcblx0Mjc1MTogZnVuY3Rpb24oKSB7IHJldHVybiBsb2FkU3RyaWN0VmVyc2lvbkNoZWNrRmFsbGJhY2soXCJkZWZhdWx0XCIsIFwicmVhY3RcIiwgWzQsMTcsMCwxXSwgZnVuY3Rpb24oKSB7IHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oNzI5NCk7IH07IH0pOyB9XG59O1xudmFyIGluaXRpYWxDb25zdW1lcyA9IFsyNzUxXTtcbmluaXRpYWxDb25zdW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XG5cdF9fd2VicGFja19yZXF1aXJlX18ubVtpZF0gPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0XHQvLyBIYW5kbGUgY2FzZSB3aGVuIG1vZHVsZSBpcyB1c2VkIHN5bmNcblx0XHRpbnN0YWxsZWRNb2R1bGVzW2lkXSA9IDA7XG5cdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1tpZF07XG5cdFx0dmFyIGZhY3RvcnkgPSBtb2R1bGVUb0hhbmRsZXJNYXBwaW5nW2lkXSgpO1xuXHRcdGlmKHR5cGVvZiBmYWN0b3J5ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcIlNoYXJlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZSBmb3IgZWFnZXIgY29uc3VtcHRpb246IFwiICsgaWQpO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG59KTtcbnZhciBjaHVua01hcHBpbmcgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uZi5jb25zdW1lcyA9IGZ1bmN0aW9uKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhjaHVua01hcHBpbmcsIGNodW5rSWQpKSB7XG5cdFx0Y2h1bmtNYXBwaW5nW2NodW5rSWRdLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRNb2R1bGVzLCBpZCkpIHJldHVybiBwcm9taXNlcy5wdXNoKGluc3RhbGxlZE1vZHVsZXNbaWRdKTtcblx0XHRcdHZhciBvbkZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG5cdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbaWRdID0gMDtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW2lkXSA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRcdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbaWRdO1xuXHRcdFx0XHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0dmFyIG9uRXJyb3IgPSBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1tpZF07XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVtpZF0gPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0XHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW2lkXTtcblx0XHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciBwcm9taXNlID0gbW9kdWxlVG9IYW5kbGVyTWFwcGluZ1tpZF0oKTtcblx0XHRcdFx0aWYocHJvbWlzZS50aGVuKSB7XG5cdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRNb2R1bGVzW2lkXSA9IHByb21pc2UudGhlbihvbkZhY3RvcnkpLmNhdGNoKG9uRXJyb3IpKTtcblx0XHRcdFx0fSBlbHNlIG9uRmFjdG9yeShwcm9taXNlKTtcblx0XHRcdH0gY2F0Y2goZSkgeyBvbkVycm9yKGUpOyB9XG5cdFx0fSk7XG5cdH1cbn0iLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MjI1OiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IGZ1bmN0aW9uKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9IGVsc2UgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IGZ1bmN0aW9uKGNodW5rSWQpIHsgcmV0dXJuIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMDsgfTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSBmdW5jdGlvbihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkge1xuXHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuXHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuXHR2YXIgcnVudGltZSA9IGRhdGFbMl07XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzW2ldXSA9IDA7XG5cdH1cblx0X193ZWJwYWNrX3JlcXVpcmVfXy5PKCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSB0aGlzW1wid2VicGFja0NodW5rem9vcF9mX21mX2xheW91dF9zc3JcIl0gPSB0aGlzW1wid2VicGFja0NodW5rem9vcF9mX21mX2xheW91dF9zc3JcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFsyMTZdLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oOTE2Mik7IH0pXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==