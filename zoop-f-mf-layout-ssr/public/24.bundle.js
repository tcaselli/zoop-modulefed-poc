/*! For license information please see 24.bundle.js.LICENSE.txt */
(this.webpackChunkzoop_f_mf_layout_ssr=this.webpackChunkzoop_f_mf_layout_ssr||[]).push([[24],{5066:function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function i(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.d(t,{Z:function(){return i}})},1174:function(e,t,n){"use strict";n.d(t,{H:function(){return _},a:function(){return S},b:function(){return C},c:function(){return A},d:function(){return P},f:function(){return U},h:function(){return I},i:function(){return L},j:function(){return R},l:function(){return k},s:function(){return i}});var r={100:"Continue",101:"Switching Protocols",102:"Processing",103:"Early Hints",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a Teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Too Early",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"};const i=(e,t)=>n=>(n.status=e,n.statusText=t||r[String(e)],n);var o=/[^a-z0-9\-#$%&'*+.^_`|~]/i,s=function(){function e(e){var t=this;this.map={},"Headers"===(null==e?void 0:e.constructor.name)?e.forEach((function(e,n){t.append(n,e)}),this):Array.isArray(e)?e.forEach((function(e){var n=e[0],r=e[1];t.append(n,Array.isArray(r)?r.join(", "):r)})):e&&Object.getOwnPropertyNames(e).forEach((function(n){t.append(n,e[n])}))}return e.prototype.set=function(e,t){this.map[this.normalizeName(e)]=this.normalizeValue(t)},e.prototype.append=function(e,t){e=this.normalizeName(e),t=this.normalizeValue(t),this.map[e]=this.has(e)?this.map[e]+", "+t:t},e.prototype.delete=function(e){return delete this.map[this.normalizeName(e)],this},e.prototype.get=function(e){return this.map[this.normalizeName(e)]||null},e.prototype.getAllHeaders=function(){return this.map},e.prototype.has=function(e){return this.map.hasOwnProperty(this.normalizeName(e))},e.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},e.prototype.normalizeName=function(e){if("string"!=typeof e&&(e=String(e)),o.test(e)||""===e.trim())throw new TypeError("Invalid character in header field name");return e.toLowerCase()},e.prototype.normalizeValue=function(e){return"string"!=typeof e&&(e=String(e)),e},e}(),a=Object.defineProperty({Headers:s},"__esModule",{value:!0});var c=function(e){var t=[];return e.forEach((function(e,n){var r=e.includes(",")?e.split(",").map((function(e){return e.trim()})):e;t.push([n,r])})),t},u=Object.defineProperty({headersToList:c},"__esModule",{value:!0}),l=["user-agent"];var p=function(e){var t={};return e.forEach((function(e,n){var r=!l.includes(n.toLowerCase())&&e.includes(",");t[n]=r?e.split(",").map((function(e){return e.trim()})):e})),t},h=Object.defineProperty({headersToObject:p},"__esModule",{value:!0});var f=function(e){return e.trim().split(/[\r\n]+/).reduce((function(e,t){var n=t.split(": "),r=n.shift(),i=n.join(": ");return e.append(r,i),e}),new Headers)},d=Object.defineProperty({stringToHeaders:f},"__esModule",{value:!0});var v=function(e){var t=new Headers;return e.forEach((function(e){var n=e[0],r=e[1];[].concat(r).forEach((function(e){t.append(n,e)}))})),t},m=Object.defineProperty({listToHeaders:v},"__esModule",{value:!0});var y=function(e,t,n){return Object.keys(e).reduce((function(n,r){return t(n,r,e[r])}),n)},E=Object.defineProperty({reduceHeadersObject:y},"__esModule",{value:!0});var g=function(e){return E.reduceHeadersObject(e,(function(e,t,n){return[].concat(n).forEach((function(n){e.append(t,n)})),e}),new Headers)},T=Object.defineProperty({objectToHeaders:g},"__esModule",{value:!0});var b=function(e){return e.map((function(e){var t=e[0],n=e[1];return[t,[].concat(n).join("; ")]}))},N=Object.defineProperty({flattenHeadersList:b},"__esModule",{value:!0});var O=function(e){return E.reduceHeadersObject(e,(function(e,t,n){return e[t]=[].concat(n).join("; "),e}),{})},w=Object.defineProperty({flattenHeadersObject:O},"__esModule",{value:!0}),_=a.Headers,I=u.headersToList;h.headersToObject;var A=d.stringToHeaders,k=m.listToHeaders,x=T.objectToHeaders;function S(...e){return t=>{const[n,r]=e;if("string"==typeof n)t.headers.append(n,r);else{x(n).forEach(((e,n)=>{t.headers.append(n,e)}))}return t}}function R(e){try{return JSON.parse(e)}catch(e){return}}E.reduceHeadersObject,N.flattenHeadersList,w.flattenHeadersObject;const C=e=>t=>(t.headers.set("Content-Type","application/json"),t.body=JSON.stringify(e),t);function L(){return"object"==typeof n.g&&("[object process]"===Object.prototype.toString.call(n.g.process)||"ReactNative"===navigator.product||void 0)}const D=2147483647,j=()=>L()?5:Math.floor(300*Math.random()+100),P=e=>t=>{let n;if("string"==typeof e)switch(e){case"infinite":n=D;break;case"real":n=j();break;default:throw new Error(`Failed to delay a response: unknown delay mode "${e}". Please make sure you provide one of the supported modes ("real", "infinite") or a number to "ctx.delay".`)}else if(void 0===e)n=j();else{if(e>D)throw new Error(`Failed to delay a response: provided delay duration (${e}) exceeds the maximum allowed duration for "setTimeout" (2147483647). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`);n=e}return t.delay=n,t},M=L()?n(3300):window.fetch,F=e=>{const t=new _(e.headers);return t.set("x-msw-bypass","true"),Object.assign(Object.assign({},e),{headers:t.getAllHeaders()})},U=(e,t={})=>{if("string"==typeof e)return M(e,F(t));const n=(e=>{const{body:t,method:n}=e,r=Object.assign(Object.assign({},e),{body:void 0});return["GET","HEAD"].includes(n)||(r.body="object"==typeof t?JSON.stringify(t):t),r})(e),r=F(n);return M(e.url.href,r)}},7421:function(e,t,n){"use strict";n.d(t,{a:function(){return i},b:function(){return y},c:function(){return o},d:function(){return c},e:function(){return u},f:function(){return l},g:function(){return v},h:function(){return p},m:function(){return m},p:function(){return a}});var r=n(1174),i="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{};function o(e){var t={exports:{}};return e(t,t.exports),t.exports}function s(e){var t,n;const i=(0,r.c)(e),o=i.get("content-type")||"text/plain",s=i.get("content-disposition");if(!s)throw new Error('"Content-Disposition" header is required.');const a=s.split(";").reduce(((e,t)=>{const[n,...r]=t.trim().split("=");return e[n]=r.join("="),e}),{});return{name:null===(t=a.name)||void 0===t?void 0:t.slice(1,-1),filename:null===(n=a.filename)||void 0===n?void 0:n.slice(1,-1),contentType:o}}function a(e,t){if(e){const n=null==t?void 0:t.get("content-type");if((null==n?void 0:n.startsWith("multipart/form-data"))&&"object"!=typeof e)return function(e,t){const n=null==t?void 0:t.get("content-type");if(!n)return;const[,...r]=n.split("; "),i=r.filter((e=>e.startsWith("boundary="))).map((e=>e.replace(/^boundary=/,"")))[0];if(!i)return;const o=new RegExp(`--+${i}`),a=e.split(o).filter((e=>e.startsWith("\r\n")&&e.endsWith("\r\n"))).map((e=>e.trimStart().replace(/\r\n$/,"")));if(!a.length)return;const c={};try{for(const e of a){const[t,...n]=e.split("\r\n\r\n"),r=n.join("\r\n\r\n"),{contentType:i,filename:o,name:a}=s(t),u=void 0===o?r:new File([r],o,{type:i}),l=c[a];void 0===l?c[a]=u:Array.isArray(l)?c[a]=[...l,u]:c[a]=[l,u]}return c}catch(e){return}}(e,t)||e;return(null==n?void 0:n.includes("json"))&&"object"!=typeof e&&(0,r.j)(e)||e}return e}function c(e){return Object.assign(Object.assign({},e),{headers:e.headers.getAllHeaders()})}function u(e){const t=(0,r.l)(e.headers);return Object.assign(Object.assign({},e),{body:a(e.body,t)})}function l(){const e=new Date;return[e.getHours(),e.getMinutes(),e.getSeconds()].map(String).map((e=>e.slice(0,2))).map((e=>e.padStart(2,"0"))).join(":")}function p(e){return e<300?"#69AB32":e<400?"#F0BB4B":"#E95F5D"}const h=(e,t)=>{const n=(e instanceof RegExp?e:(e=>{const t=e.replace(/\./g,"\\.").replace(/\//g,"/").replace(/\?/g,"\\?").replace(/\/+$/,"").replace(/\*+/g,".*").replace(/:([^\d|^\/][a-zA-Z0-9_]*(?=(?:\/|\\.)|$))/g,((e,t)=>`(?<${t}>[^/]+?)`)).concat("(\\/|$)");return new RegExp(t,"gi")})(e)).exec(t)||!1,r=e instanceof RegExp?!!n:!!n&&n[0]===n.input;return{matches:r,params:n&&r&&n.groups||null}};var f=o((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getCleanUrl=void 0,t.getCleanUrl=function(e,t){return void 0===t&&(t=!0),[t&&e.origin,e.pathname].filter(Boolean).join("")}}));const d=e=>{const t="undefined"!=typeof location;return"string"==typeof e&&e.startsWith("/")?`${t?location.origin:""}${e}`:e};function v(e){if(e instanceof RegExp||e.includes("*"))return e;try{return new URL(d(e))}catch(t){return e}}function m(e,t){const n=function(e){return e instanceof URL?f.getCleanUrl(e):e instanceof RegExp?e:d(e)}(v(t)),r=f.getCleanUrl(e);return h(n,r)}function y(){const e=(new Error).stack.split("\n"),t=/(node_modules)?[\/\\]lib[\/\\](umd|esm|iief|cjs)[\/\\]|^[^\/\\]*$/,n=e.slice(1).find((e=>!t.test(e)));if(!n)return;return n.replace(/\s*at [^()]*\(([^)]+)\)/,"$1").replace(/^@/,"")}},5801:function(e,t,n){"use strict";n.d(t,{Lv:function(){return Je}});var r=n(7421),i=n(1174);function o(e){return null!=e&&"object"==typeof e&&!Array.isArray(e)}function s(e,t){return Object.entries(t).reduce(((e,[t,n])=>{const r=e[t];return Array.isArray(r)&&Array.isArray(n)?(e[t]=r.concat(n),e):o(r)&&o(n)?(e[t]=s(r,n),e):(e[t]=n,e)}),Object.assign({},e))}function a(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var u="function"==typeof Symbol&&null!=Symbol.toStringTag?Symbol.toStringTag:"@@toStringTag";function l(e,t){for(var n,r=/\r\n|[\n\r]/g,i=1,o=t+1;(n=r.exec(e.body))&&n.index<t;)i+=1,o=t+1-(n.index+n[0].length);return{line:i,column:o}}function p(e){return h(e.source,l(e.source,e.start))}function h(e,t){var n=e.locationOffset.column-1,r=d(n)+e.body,i=t.line-1,o=e.locationOffset.line-1,s=t.line+o,a=1===t.line?n:0,c=t.column+a,u="".concat(e.name,":").concat(s,":").concat(c,"\n"),l=r.split(/\r\n|[\n\r]/g),p=l[i];if(p.length>120){for(var h=Math.floor(c/80),v=c%80,m=[],y=0;y<p.length;y+=80)m.push(p.slice(y,y+80));return u+f([["".concat(s),m[0]]].concat(m.slice(1,h+1).map((function(e){return["",e]})),[[" ",d(v-1)+"^"],["",m[h+1]]]))}return u+f([["".concat(s-1),l[i-1]],["".concat(s),p],["",d(c-1)+"^"],["".concat(s+1),l[i+1]]])}function f(e){var t=e.filter((function(e){return e[0],void 0!==e[1]})),n=Math.max.apply(Math,t.map((function(e){return e[0].length})));return t.map((function(e){var t,r=e[0],i=e[1];return d(n-(t=r).length)+t+(i?" | "+i:" |")})).join("\n")}function d(e){return Array(e+1).join(" ")}function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?E(e):t}function E(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(e){var t="function"==typeof Map?new Map:void 0;return(g=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return T(e,arguments,O(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),N(r,e)})(e)}function T(e,t,n){return(T=b()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&N(i,n.prototype),i}).apply(null,arguments)}function b(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(a,e);var t,n,r,i,o,s=(t=a,n=b(),function(){var e,r=O(t);if(n){var i=O(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return y(this,e)});function a(e,t,n,r,i,o,u){var p,h,f,d,v;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),v=s.call(this,e);var m,g=Array.isArray(t)?0!==t.length?t:void 0:t?[t]:void 0,T=n;!T&&g&&(T=null===(m=g[0].loc)||void 0===m?void 0:m.source);var b,N=r;!N&&g&&(N=g.reduce((function(e,t){return t.loc&&e.push(t.loc.start),e}),[])),N&&0===N.length&&(N=void 0),r&&n?b=r.map((function(e){return l(n,e)})):g&&(b=g.reduce((function(e,t){return t.loc&&e.push(l(t.loc.source,t.loc.start)),e}),[]));var O,w=u;if(null==w&&null!=o){var _=o.extensions;"object"==c(O=_)&&null!==O&&(w=_)}return Object.defineProperties(E(v),{name:{value:"GraphQLError"},message:{value:e,enumerable:!0,writable:!0},locations:{value:null!==(p=b)&&void 0!==p?p:void 0,enumerable:null!=b},path:{value:null!=i?i:void 0,enumerable:null!=i},nodes:{value:null!=g?g:void 0},source:{value:null!==(h=T)&&void 0!==h?h:void 0},positions:{value:null!==(f=N)&&void 0!==f?f:void 0},originalError:{value:o},extensions:{value:null!==(d=w)&&void 0!==d?d:void 0,enumerable:null!=w}}),(null==o?void 0:o.stack)?(Object.defineProperty(E(v),"stack",{value:o.stack,writable:!0,configurable:!0}),y(v)):(Error.captureStackTrace?Error.captureStackTrace(E(v),a):Object.defineProperty(E(v),"stack",{value:Error().stack,writable:!0,configurable:!0}),v)}return r=a,(i=[{key:"toString",value:function(){return function(e){var t=e.message;if(e.nodes)for(var n=0,r=e.nodes;n<r.length;n++){var i=r[n];i.loc&&(t+="\n\n"+p(i.loc))}else if(e.source&&e.locations)for(var o=0,s=e.locations;o<s.length;o++){var a=s[o];t+="\n\n"+h(e.source,a)}return t}(this)}},{key:u,get:function(){return"Object"}}])&&m(r.prototype,i),o&&m(r,o),a}(g(Error));function _(e,t,n){return new w("Syntax Error: ".concat(n),void 0,e,[t])}var I=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"});var A="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):void 0;function k(e){var t=e.prototype.toJSON;"function"==typeof t||function(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}(0),e.prototype.inspect=t,A&&(e.prototype[A]=t)}var x=function(){function e(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}return e.prototype.toJSON=function(){return{start:this.start,end:this.end}},e}();k(x);var S=function(){function e(e,t,n,r,i,o,s){this.kind=e,this.start=t,this.end=n,this.line=r,this.column=i,this.value=s,this.prev=o,this.next=null}return e.prototype.toJSON=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},e}();k(S);var R=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});function C(e){return(C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e){return D(e,[])}function D(e,t){switch(C(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return null===e?"null":function(e,t){if(-1!==t.indexOf(e))return"[Circular]";var n=[].concat(t,[e]),r=function(e){var t=e[String(A)];if("function"==typeof t)return t;if("function"==typeof e.inspect)return e.inspect}(e);if(void 0!==r){var i=r.call(e);if(i!==e)return"string"==typeof i?i:D(i,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";for(var n=Math.min(10,e.length),r=e.length-n,i=[],o=0;o<n;++o)i.push(D(e[o],t));1===r?i.push("... 1 more item"):r>1&&i.push("... ".concat(r," more items"));return"["+i.join(", ")+"]"}(e,n);return function(e,t){var n=Object.keys(e);if(0===n.length)return"{}";if(t.length>2)return"["+function(e){var t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){var n=e.constructor.name;if("string"==typeof n&&""!==n)return n}return t}(e)+"]";return"{ "+n.map((function(n){return n+": "+D(e[n],t)})).join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}function j(e,t){if(!Boolean(e))throw new Error(t)}var P=function(e,t){return e instanceof t};function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var F=function(){function e(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GraphQL request",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{line:1,column:1};"string"==typeof e||j(0,"Body must be a string. Received: ".concat(L(e),".")),this.body=e,this.name=t,this.locationOffset=n,this.locationOffset.line>0||j(0,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||j(0,"column in locationOffset is 1-indexed and must be positive.")}var t,n,r;return t=e,(n=[{key:u,get:function(){return"Source"}}])&&M(t.prototype,n),r&&M(t,r),e}();var U=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});function q(e){var t=e.split(/\r\n|[\n\r]/g),n=function(e){for(var t,n=!0,r=!0,i=0,o=null,s=0;s<e.length;++s)switch(e.charCodeAt(s)){case 13:10===e.charCodeAt(s+1)&&++s;case 10:n=!1,r=!0,i=0;break;case 9:case 32:++i;break;default:r&&!n&&(null===o||i<o)&&(o=i),r=!1}return null!==(t=o)&&void 0!==t?t:0}(e);if(0!==n)for(var r=1;r<t.length;r++)t[r]=t[r].slice(n);for(var i=0;i<t.length&&B(t[i]);)++i;for(var o=t.length;o>i&&B(t[o-1]);)--o;return t.slice(i,o).join("\n")}function B(e){for(var t=0;t<e.length;++t)if(" "!==e[t]&&"\t"!==e[t])return!1;return!0}var H=function(){function e(e){var t=new S(R.SOF,0,0,0,0,null);this.source=e,this.lastToken=t,this.token=t,this.line=1,this.lineStart=0}var t=e.prototype;return t.advance=function(){return this.lastToken=this.token,this.token=this.lookahead()},t.lookahead=function(){var e=this.token;if(e.kind!==R.EOF)do{var t;e=null!==(t=e.next)&&void 0!==t?t:e.next=K(this,e)}while(e.kind===R.COMMENT);return e},e}();function $(e){return isNaN(e)?R.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'.concat(("00"+e.toString(16).toUpperCase()).slice(-4),'"')}function K(e,t){for(var n=e.source,r=n.body,i=r.length,o=t.end;o<i;){var s=r.charCodeAt(o),a=e.line,c=1+o-e.lineStart;switch(s){case 65279:case 9:case 32:case 44:++o;continue;case 10:++o,++e.line,e.lineStart=o;continue;case 13:10===r.charCodeAt(o+1)?o+=2:++o,++e.line,e.lineStart=o;continue;case 33:return new S(R.BANG,o,o+1,a,c,t);case 35:return W(n,o,a,c,t);case 36:return new S(R.DOLLAR,o,o+1,a,c,t);case 38:return new S(R.AMP,o,o+1,a,c,t);case 40:return new S(R.PAREN_L,o,o+1,a,c,t);case 41:return new S(R.PAREN_R,o,o+1,a,c,t);case 46:if(46===r.charCodeAt(o+1)&&46===r.charCodeAt(o+2))return new S(R.SPREAD,o,o+3,a,c,t);break;case 58:return new S(R.COLON,o,o+1,a,c,t);case 61:return new S(R.EQUALS,o,o+1,a,c,t);case 64:return new S(R.AT,o,o+1,a,c,t);case 91:return new S(R.BRACKET_L,o,o+1,a,c,t);case 93:return new S(R.BRACKET_R,o,o+1,a,c,t);case 123:return new S(R.BRACE_L,o,o+1,a,c,t);case 124:return new S(R.PIPE,o,o+1,a,c,t);case 125:return new S(R.BRACE_R,o,o+1,a,c,t);case 34:return 34===r.charCodeAt(o+1)&&34===r.charCodeAt(o+2)?z(n,o,a,c,t,e):J(n,o,a,c,t);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return G(n,o,s,a,c,t);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return Q(n,o,a,c,t)}throw _(n,o,V(s))}var u=e.line,l=1+o-e.lineStart;return new S(R.EOF,i,i,u,l,t)}function V(e){return e<32&&9!==e&&10!==e&&13!==e?"Cannot contain the invalid character ".concat($(e),"."):39===e?"Unexpected single quote character ('), did you mean to use a double quote (\")?":"Cannot parse the unexpected character ".concat($(e),".")}function W(e,t,n,r,i){var o,s=e.body,a=t;do{o=s.charCodeAt(++a)}while(!isNaN(o)&&(o>31||9===o));return new S(R.COMMENT,t,a,n,r,i,s.slice(t+1,a))}function G(e,t,n,r,i,o){var s=e.body,a=n,c=t,u=!1;if(45===a&&(a=s.charCodeAt(++c)),48===a){if((a=s.charCodeAt(++c))>=48&&a<=57)throw _(e,c,"Invalid number, unexpected digit after 0: ".concat($(a),"."))}else c=Y(e,c,a),a=s.charCodeAt(c);if(46===a&&(u=!0,a=s.charCodeAt(++c),c=Y(e,c,a),a=s.charCodeAt(c)),69!==a&&101!==a||(u=!0,43!==(a=s.charCodeAt(++c))&&45!==a||(a=s.charCodeAt(++c)),c=Y(e,c,a),a=s.charCodeAt(c)),46===a||function(e){return 95===e||e>=65&&e<=90||e>=97&&e<=122}(a))throw _(e,c,"Invalid number, expected digit but got: ".concat($(a),"."));return new S(u?R.FLOAT:R.INT,t,c,r,i,o,s.slice(t,c))}function Y(e,t,n){var r=e.body,i=t,o=n;if(o>=48&&o<=57){do{o=r.charCodeAt(++i)}while(o>=48&&o<=57);return i}throw _(e,i,"Invalid number, expected digit but got: ".concat($(o),"."))}function J(e,t,n,r,i){for(var o,s,a,c,u=e.body,l=t+1,p=l,h=0,f="";l<u.length&&!isNaN(h=u.charCodeAt(l))&&10!==h&&13!==h;){if(34===h)return f+=u.slice(p,l),new S(R.STRING,t,l+1,n,r,i,f);if(h<32&&9!==h)throw _(e,l,"Invalid character within String: ".concat($(h),"."));if(++l,92===h){switch(f+=u.slice(p,l-1),h=u.charCodeAt(l)){case 34:f+='"';break;case 47:f+="/";break;case 92:f+="\\";break;case 98:f+="\b";break;case 102:f+="\f";break;case 110:f+="\n";break;case 114:f+="\r";break;case 116:f+="\t";break;case 117:var d=(o=u.charCodeAt(l+1),s=u.charCodeAt(l+2),a=u.charCodeAt(l+3),c=u.charCodeAt(l+4),X(o)<<12|X(s)<<8|X(a)<<4|X(c));if(d<0){var v=u.slice(l+1,l+5);throw _(e,l,"Invalid character escape sequence: \\u".concat(v,"."))}f+=String.fromCharCode(d),l+=4;break;default:throw _(e,l,"Invalid character escape sequence: \\".concat(String.fromCharCode(h),"."))}p=++l}}throw _(e,l,"Unterminated string.")}function z(e,t,n,r,i,o){for(var s=e.body,a=t+3,c=a,u=0,l="";a<s.length&&!isNaN(u=s.charCodeAt(a));){if(34===u&&34===s.charCodeAt(a+1)&&34===s.charCodeAt(a+2))return l+=s.slice(c,a),new S(R.BLOCK_STRING,t,a+3,n,r,i,q(l));if(u<32&&9!==u&&10!==u&&13!==u)throw _(e,a,"Invalid character within String: ".concat($(u),"."));10===u?(++a,++o.line,o.lineStart=a):13===u?(10===s.charCodeAt(a+1)?a+=2:++a,++o.line,o.lineStart=a):92===u&&34===s.charCodeAt(a+1)&&34===s.charCodeAt(a+2)&&34===s.charCodeAt(a+3)?(l+=s.slice(c,a)+'"""',c=a+=4):++a}throw _(e,a,"Unterminated string.")}function X(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function Q(e,t,n,r,i){for(var o=e.body,s=o.length,a=t+1,c=0;a!==s&&!isNaN(c=o.charCodeAt(a))&&(95===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122);)++a;return new S(R.NAME,t,a,n,r,i,o.slice(t,a))}function Z(e,t){return new ee(e,t).parseDocument()}var ee=function(){function e(e,t){var n=function(e){return P(e,F)}(e)?e:new F(e);this._lexer=new H(n),this._options=t}var t=e.prototype;return t.parseName=function(){var e=this.expectToken(R.NAME);return{kind:I.NAME,value:e.value,loc:this.loc(e)}},t.parseDocument=function(){var e=this._lexer.token;return{kind:I.DOCUMENT,definitions:this.many(R.SOF,this.parseDefinition,R.EOF),loc:this.loc(e)}},t.parseDefinition=function(){if(this.peek(R.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(R.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},t.parseOperationDefinition=function(){var e=this._lexer.token;if(this.peek(R.BRACE_L))return{kind:I.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(e)};var t,n=this.parseOperationType();return this.peek(R.NAME)&&(t=this.parseName()),{kind:I.OPERATION_DEFINITION,operation:n,name:t,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseOperationType=function(){var e=this.expectToken(R.NAME);switch(e.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(e)},t.parseVariableDefinitions=function(){return this.optionalMany(R.PAREN_L,this.parseVariableDefinition,R.PAREN_R)},t.parseVariableDefinition=function(){var e=this._lexer.token;return{kind:I.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(R.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(R.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(e)}},t.parseVariable=function(){var e=this._lexer.token;return this.expectToken(R.DOLLAR),{kind:I.VARIABLE,name:this.parseName(),loc:this.loc(e)}},t.parseSelectionSet=function(){var e=this._lexer.token;return{kind:I.SELECTION_SET,selections:this.many(R.BRACE_L,this.parseSelection,R.BRACE_R),loc:this.loc(e)}},t.parseSelection=function(){return this.peek(R.SPREAD)?this.parseFragment():this.parseField()},t.parseField=function(){var e,t,n=this._lexer.token,r=this.parseName();return this.expectOptionalToken(R.COLON)?(e=r,t=this.parseName()):t=r,{kind:I.FIELD,alias:e,name:t,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(R.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(n)}},t.parseArguments=function(e){var t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(R.PAREN_L,t,R.PAREN_R)},t.parseArgument=function(){var e=this._lexer.token,t=this.parseName();return this.expectToken(R.COLON),{kind:I.ARGUMENT,name:t,value:this.parseValueLiteral(!1),loc:this.loc(e)}},t.parseConstArgument=function(){var e=this._lexer.token;return{kind:I.ARGUMENT,name:this.parseName(),value:(this.expectToken(R.COLON),this.parseValueLiteral(!0)),loc:this.loc(e)}},t.parseFragment=function(){var e=this._lexer.token;this.expectToken(R.SPREAD);var t=this.expectOptionalKeyword("on");return!t&&this.peek(R.NAME)?{kind:I.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(e)}:{kind:I.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseFragmentDefinition=function(){var e,t=this._lexer.token;return this.expectKeyword("fragment"),!0===(null===(e=this._options)||void 0===e?void 0:e.experimentalFragmentVariables)?{kind:I.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(t)}:{kind:I.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(t)}},t.parseFragmentName=function(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()},t.parseValueLiteral=function(e){var t=this._lexer.token;switch(t.kind){case R.BRACKET_L:return this.parseList(e);case R.BRACE_L:return this.parseObject(e);case R.INT:return this._lexer.advance(),{kind:I.INT,value:t.value,loc:this.loc(t)};case R.FLOAT:return this._lexer.advance(),{kind:I.FLOAT,value:t.value,loc:this.loc(t)};case R.STRING:case R.BLOCK_STRING:return this.parseStringLiteral();case R.NAME:switch(this._lexer.advance(),t.value){case"true":return{kind:I.BOOLEAN,value:!0,loc:this.loc(t)};case"false":return{kind:I.BOOLEAN,value:!1,loc:this.loc(t)};case"null":return{kind:I.NULL,loc:this.loc(t)};default:return{kind:I.ENUM,value:t.value,loc:this.loc(t)}}case R.DOLLAR:if(!e)return this.parseVariable()}throw this.unexpected()},t.parseStringLiteral=function(){var e=this._lexer.token;return this._lexer.advance(),{kind:I.STRING,value:e.value,block:e.kind===R.BLOCK_STRING,loc:this.loc(e)}},t.parseList=function(e){var t=this,n=this._lexer.token;return{kind:I.LIST,values:this.any(R.BRACKET_L,(function(){return t.parseValueLiteral(e)}),R.BRACKET_R),loc:this.loc(n)}},t.parseObject=function(e){var t=this,n=this._lexer.token;return{kind:I.OBJECT,fields:this.any(R.BRACE_L,(function(){return t.parseObjectField(e)}),R.BRACE_R),loc:this.loc(n)}},t.parseObjectField=function(e){var t=this._lexer.token,n=this.parseName();return this.expectToken(R.COLON),{kind:I.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e),loc:this.loc(t)}},t.parseDirectives=function(e){for(var t=[];this.peek(R.AT);)t.push(this.parseDirective(e));return t},t.parseDirective=function(e){var t=this._lexer.token;return this.expectToken(R.AT),{kind:I.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e),loc:this.loc(t)}},t.parseTypeReference=function(){var e,t=this._lexer.token;return this.expectOptionalToken(R.BRACKET_L)?(e=this.parseTypeReference(),this.expectToken(R.BRACKET_R),e={kind:I.LIST_TYPE,type:e,loc:this.loc(t)}):e=this.parseNamedType(),this.expectOptionalToken(R.BANG)?{kind:I.NON_NULL_TYPE,type:e,loc:this.loc(t)}:e},t.parseNamedType=function(){var e=this._lexer.token;return{kind:I.NAMED_TYPE,name:this.parseName(),loc:this.loc(e)}},t.parseTypeSystemDefinition=function(){var e=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(e.kind===R.NAME)switch(e.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(e)},t.peekDescription=function(){return this.peek(R.STRING)||this.peek(R.BLOCK_STRING)},t.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},t.parseSchemaDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");var n=this.parseDirectives(!0),r=this.many(R.BRACE_L,this.parseOperationTypeDefinition,R.BRACE_R);return{kind:I.SCHEMA_DEFINITION,description:t,directives:n,operationTypes:r,loc:this.loc(e)}},t.parseOperationTypeDefinition=function(){var e=this._lexer.token,t=this.parseOperationType();this.expectToken(R.COLON);var n=this.parseNamedType();return{kind:I.OPERATION_TYPE_DEFINITION,operation:t,type:n,loc:this.loc(e)}},t.parseScalarTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");var n=this.parseName(),r=this.parseDirectives(!0);return{kind:I.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:r,loc:this.loc(e)}},t.parseObjectTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");var n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseDirectives(!0),o=this.parseFieldsDefinition();return{kind:I.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:o,loc:this.loc(e)}},t.parseImplementsInterfaces=function(){var e;if(!this.expectOptionalKeyword("implements"))return[];if(!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLImplementsInterfaces)){var t=[];this.expectOptionalToken(R.AMP);do{t.push(this.parseNamedType())}while(this.expectOptionalToken(R.AMP)||this.peek(R.NAME));return t}return this.delimitedMany(R.AMP,this.parseNamedType)},t.parseFieldsDefinition=function(){var e;return!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLEmptyFields)&&this.peek(R.BRACE_L)&&this._lexer.lookahead().kind===R.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(R.BRACE_L,this.parseFieldDefinition,R.BRACE_R)},t.parseFieldDefinition=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseArgumentDefs();this.expectToken(R.COLON);var i=this.parseTypeReference(),o=this.parseDirectives(!0);return{kind:I.FIELD_DEFINITION,description:t,name:n,arguments:r,type:i,directives:o,loc:this.loc(e)}},t.parseArgumentDefs=function(){return this.optionalMany(R.PAREN_L,this.parseInputValueDef,R.PAREN_R)},t.parseInputValueDef=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(R.COLON);var r,i=this.parseTypeReference();this.expectOptionalToken(R.EQUALS)&&(r=this.parseValueLiteral(!0));var o=this.parseDirectives(!0);return{kind:I.INPUT_VALUE_DEFINITION,description:t,name:n,type:i,defaultValue:r,directives:o,loc:this.loc(e)}},t.parseInterfaceTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");var n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseDirectives(!0),o=this.parseFieldsDefinition();return{kind:I.INTERFACE_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:o,loc:this.loc(e)}},t.parseUnionTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");var n=this.parseName(),r=this.parseDirectives(!0),i=this.parseUnionMemberTypes();return{kind:I.UNION_TYPE_DEFINITION,description:t,name:n,directives:r,types:i,loc:this.loc(e)}},t.parseUnionMemberTypes=function(){return this.expectOptionalToken(R.EQUALS)?this.delimitedMany(R.PIPE,this.parseNamedType):[]},t.parseEnumTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");var n=this.parseName(),r=this.parseDirectives(!0),i=this.parseEnumValuesDefinition();return{kind:I.ENUM_TYPE_DEFINITION,description:t,name:n,directives:r,values:i,loc:this.loc(e)}},t.parseEnumValuesDefinition=function(){return this.optionalMany(R.BRACE_L,this.parseEnumValueDefinition,R.BRACE_R)},t.parseEnumValueDefinition=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseDirectives(!0);return{kind:I.ENUM_VALUE_DEFINITION,description:t,name:n,directives:r,loc:this.loc(e)}},t.parseInputObjectTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");var n=this.parseName(),r=this.parseDirectives(!0),i=this.parseInputFieldsDefinition();return{kind:I.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:r,fields:i,loc:this.loc(e)}},t.parseInputFieldsDefinition=function(){return this.optionalMany(R.BRACE_L,this.parseInputValueDef,R.BRACE_R)},t.parseTypeSystemExtension=function(){var e=this._lexer.lookahead();if(e.kind===R.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)},t.parseSchemaExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var t=this.parseDirectives(!0),n=this.optionalMany(R.BRACE_L,this.parseOperationTypeDefinition,R.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return{kind:I.SCHEMA_EXTENSION,directives:t,operationTypes:n,loc:this.loc(e)}},t.parseScalarTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var t=this.parseName(),n=this.parseDirectives(!0);if(0===n.length)throw this.unexpected();return{kind:I.SCALAR_TYPE_EXTENSION,name:t,directives:n,loc:this.loc(e)}},t.parseObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return{kind:I.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i,loc:this.loc(e)}},t.parseInterfaceTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return{kind:I.INTERFACE_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i,loc:this.loc(e)}},t.parseUnionTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseUnionMemberTypes();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:I.UNION_TYPE_EXTENSION,name:t,directives:n,types:r,loc:this.loc(e)}},t.parseEnumTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseEnumValuesDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:I.ENUM_TYPE_EXTENSION,name:t,directives:n,values:r,loc:this.loc(e)}},t.parseInputObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseInputFieldsDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:I.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:r,loc:this.loc(e)}},t.parseDirectiveDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(R.AT);var n=this.parseName(),r=this.parseArgumentDefs(),i=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var o=this.parseDirectiveLocations();return{kind:I.DIRECTIVE_DEFINITION,description:t,name:n,arguments:r,repeatable:i,locations:o,loc:this.loc(e)}},t.parseDirectiveLocations=function(){return this.delimitedMany(R.PIPE,this.parseDirectiveLocation)},t.parseDirectiveLocation=function(){var e=this._lexer.token,t=this.parseName();if(void 0!==U[t.value])return t;throw this.unexpected(e)},t.loc=function(e){var t;if(!0!==(null===(t=this._options)||void 0===t?void 0:t.noLocation))return new x(e,this._lexer.lastToken,this._lexer.source)},t.peek=function(e){return this._lexer.token.kind===e},t.expectToken=function(e){var t=this._lexer.token;if(t.kind===e)return this._lexer.advance(),t;throw _(this._lexer.source,t.start,"Expected ".concat(ne(e),", found ").concat(te(t),"."))},t.expectOptionalToken=function(e){var t=this._lexer.token;if(t.kind===e)return this._lexer.advance(),t},t.expectKeyword=function(e){var t=this._lexer.token;if(t.kind!==R.NAME||t.value!==e)throw _(this._lexer.source,t.start,'Expected "'.concat(e,'", found ').concat(te(t),"."));this._lexer.advance()},t.expectOptionalKeyword=function(e){var t=this._lexer.token;return t.kind===R.NAME&&t.value===e&&(this._lexer.advance(),!0)},t.unexpected=function(e){var t=null!=e?e:this._lexer.token;return _(this._lexer.source,t.start,"Unexpected ".concat(te(t),"."))},t.any=function(e,t,n){this.expectToken(e);for(var r=[];!this.expectOptionalToken(n);)r.push(t.call(this));return r},t.optionalMany=function(e,t,n){if(this.expectOptionalToken(e)){var r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r}return[]},t.many=function(e,t,n){this.expectToken(e);var r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r},t.delimitedMany=function(e,t){this.expectOptionalToken(e);var n=[];do{n.push(t.call(this))}while(this.expectOptionalToken(e));return n},e}();function te(e){var t=e.value;return ne(e.kind)+(null!=t?' "'.concat(t,'"'):"")}function ne(e){return function(e){return e===R.BANG||e===R.DOLLAR||e===R.AMP||e===R.PAREN_L||e===R.PAREN_R||e===R.SPREAD||e===R.COLON||e===R.EQUALS||e===R.AT||e===R.BRACKET_L||e===R.BRACKET_R||e===R.BRACE_L||e===R.PIPE||e===R.BRACE_R}(e)?'"'.concat(e,'"'):e}const re={set:i.a,status:i.s,delay:i.d,fetch:i.f,data:e=>t=>{const n=s((0,i.j)(t.body)||{},{data:e});return(0,i.b)(n)(t)},errors:e=>t=>{if(null==e)return t;const n=s((0,i.j)(t.body)||{},{errors:e});return(0,i.b)(n)(t)}};function ie(e,t="query"){var n;const r=Z(e).definitions.find((e=>"OperationDefinition"===e.kind&&("all"===t||e.operation===t)));return{operationType:null==r?void 0:r.operation,operationName:null===(n=null==r?void 0:r.name)||void 0===n?void 0:n.value}}function oe(e,t,n,o){const s=(0,r.b)();return{resolver:o,parse(t){var n,r;switch(t.method){case"GET":{const n=t.url.searchParams.get("query"),r=t.url.searchParams.get("variables")||"";if(!n)return null;const o=r?(0,i.j)(r):{},{operationType:s,operationName:a}=ie(n,e);return{operationType:s,operationName:a,variables:o}}case"POST":if(null===(n=t.body)||void 0===n?void 0:n.query){const{query:n,variables:r}=t.body,{operationType:i,operationName:o}=ie(n,e);return{operationType:i,operationName:o,variables:r}}if(null===(r=t.body)||void 0===r?void 0:r.operations){const n=t.body,{operations:r,map:o}=n,s=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(n,["operations","map"]),a=(0,i.j)(r)||{};if(!a.query)return null;const c=(0,i.j)(o)||{},{operationType:u,operationName:l}=ie(a.query,e),p=s;let h;try{h=a.variables?function(e,t,n){const r={variables:e};for(const[e,i]of Object.entries(t)){if(!(e in n))throw new Error(`Given files do not have a key '${e}' .`);for(const t of i){const[i,...o]=t.split(".").reverse(),s=o.reverse();let a=r;for(const e of s){if(!(e in a))throw new Error(`Property '${s}' is not in operations.`);a=a[e]}a[i]=n[e]}}return r.variables}(a.variables,c,p):{}}catch(e){return null}return{operationType:u,operationName:l,variables:h}}return null;default:return null}},getPublicRequest:(e,t)=>Object.assign(Object.assign({},e),{variables:t.variables||{}}),predicate(e,i){if(!i||!i.operationName)return!1;const o=(0,r.m)(e.url,n),s=t instanceof RegExp?t.test(i.operationName):t===i.operationName;return o.matches&&s},defineContext:()=>re,log(e,n,i,o){const{operationType:s,operationName:a}=o,c=(0,r.d)(e),u=(0,r.e)(n);console.groupCollapsed("[MSW] %s %s (%c%s%c)",(0,r.f)(),a,`color:${(0,r.h)(n.status)}`,n.status,"color:inherit"),console.log("Request:",c),console.log("Handler:",{operationType:s,operationName:t,predicate:i.predicate}),console.log("Response:",u),console.groupEnd()},getMetaInfo:()=>({type:"graphql",header:"all"===e?`${e} (origin: ${n.toString()})`:`${e} ${t} (origin: ${n.toString()})`,mask:n,callFrame:s,operationType:e,operationName:t})}}const se=(e,t)=>(n,r)=>oe(e,n,t,r),ae=e=>t=>oe("all",new RegExp(".*"),e,t),ce={operation:ae("*"),query:se("query","*"),mutation:se("mutation","*")};Object.assign(Object.assign({},ce),{link:function(e){return{operation:ae(e),query:se("query",e),mutation:se("mutation",e)}}});var ue,le=n(515),pe=n(5693),he="object"==typeof Reflect?Reflect:null,fe=he&&"function"==typeof he.apply?he.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};ue=he&&"function"==typeof he.ownKeys?he.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var de=Number.isNaN||function(e){return e!=e};function ve(){ve.init.call(this)}var me=ve,ye=function(e,t){return new Promise((function(n,r){function i(){void 0!==o&&e.removeListener("error",o),n([].slice.call(arguments))}var o;"error"!==t&&(o=function(n){e.removeListener(t,i),r(n)},e.once("error",o)),e.once(t,i)}))};ve.EventEmitter=ve,ve.prototype._events=void 0,ve.prototype._eventsCount=0,ve.prototype._maxListeners=void 0;var Ee=10;function ge(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function Te(e){return void 0===e._maxListeners?ve.defaultMaxListeners:e._maxListeners}function be(e,t,n,r){var i,o,s,a;if(ge(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=Te(e))>0&&s.length>i&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function Ne(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function Oe(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=Ne.bind(r);return i.listener=n,r.wrapFn=i,i}function we(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):Ie(i,i.length)}function _e(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function Ie(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(ve,"defaultMaxListeners",{enumerable:!0,get:function(){return Ee},set:function(e){if("number"!=typeof e||e<0||de(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");Ee=e}}),ve.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},ve.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||de(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},ve.prototype.getMaxListeners=function(){return Te(this)},ve.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var a=i[e];if(void 0===a)return!1;if("function"==typeof a)fe(a,this,t);else{var c=a.length,u=Ie(a,c);for(n=0;n<c;++n)fe(u[n],this,t)}return!0},ve.prototype.addListener=function(e,t){return be(this,e,t,!1)},ve.prototype.on=ve.prototype.addListener,ve.prototype.prependListener=function(e,t){return be(this,e,t,!0)},ve.prototype.once=function(e,t){return ge(t),this.on(e,Oe(this,e,t)),this},ve.prototype.prependOnceListener=function(e,t){return ge(t),this.prependListener(e,Oe(this,e,t)),this},ve.prototype.removeListener=function(e,t){var n,r,i,o,s;if(ge(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},ve.prototype.off=ve.prototype.removeListener,ve.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},ve.prototype.listeners=function(e){return we(this,e,!0)},ve.prototype.rawListeners=function(e){return we(this,e,!1)},ve.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):_e.call(e,t)},ve.prototype.listenerCount=_e,ve.prototype.eventNames=function(){return this._eventsCount>0?ue(this._events):[]},me.once=ye;var Ae=(0,r.c)((function(e,t){var n,i=r.a&&r.a.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=r.a&&r.a.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r};t.__esModule=!0,t.StrictEventEmitter=void 0;var s=function(e){function t(){return e.call(this)||this}return i(t,e),t.prototype.on=function(t,n){return e.prototype.on.call(this,t.toString(),n)},t.prototype.once=function(t,n){return e.prototype.on.call(this,t.toString(),n)},t.prototype.off=function(t,n){return e.prototype.off.call(this,t.toString(),n)},t.prototype.emit=function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return e.prototype.emit.apply(this,o([t.toString()],n))},t.prototype.addListener=function(t,n){return e.prototype.addListener.call(this,t.toString(),n)},t.prototype.removeListener=function(t,n){return e.prototype.removeListener.call(this,t.toString(),n)},t}(me.EventEmitter);t.StrictEventEmitter=s})),ke=(0,r.c)((function(e,t){var n=r.a&&r.a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]});t.__esModule=!0,t.StrictEventEmitter=void 0,n(t,Ae,"StrictEventEmitter")})),xe=Object.defineProperty({until:async e=>{try{return[null,await e().catch((e=>{throw e}))]}catch(e){return[e,null]}}},"__esModule",{value:!0}).until;const Se=(e,t,n)=>[e.active,e.installing,e.waiting].filter(Boolean).find((e=>n(e.scriptURL,t)))||null;const Re=(e,t={},n)=>a(void 0,void 0,void 0,(function*(){const r=new URL(e,location.origin).href;const[,i]=yield xe((()=>a(void 0,void 0,void 0,(function*(){return(yield navigator.serviceWorker.getRegistrations()).filter((e=>Se(e,r,n)))}))));!navigator.serviceWorker.controller&&i.length>0&&location.reload();const[o]=i;if(o)return o.update().then((()=>[Se(o,r,n),o]));const[s,c]=yield xe((()=>a(void 0,void 0,void 0,(function*(){const i=yield navigator.serviceWorker.register(e,t);return[Se(i,r,n),i]}))));if(s){if(s.message.includes("(404)")){const e=new URL((null==t?void 0:t.scope)||"/",location.href);return console.error(`[MSW] Failed to register a Service Worker for scope ('${e.href}') with script ('${r}'): Service Worker script does not exist at the given path.\n\nDid you forget to run "npx msw init <PUBLIC_DIR>"?\n\nLearn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`),null}return console.error(`[MSW] Failed to register a Service Worker:\n\n${s.message}`),null}return c})),Ce={status:i.s,set:i.a,delay:i.d,fetch:i.f};class Le extends Error{constructor(e){super(e),this.name="NetworkError"}}const De={status:200,statusText:"OK",body:null,delay:0,once:!1},je=[];function Pe(e,t=je){return(...n)=>a(this,void 0,void 0,(function*(){const r=Object.assign({},De,{headers:new i.H({"x-powered-by":"msw"})},e),o=[...t,...n].filter(Boolean);return o.length>0?function(...e){return(...t)=>e.reduceRight(((e,t)=>e instanceof Promise?Promise.resolve(e).then(t):t(e)),t[0])}(...o)(r):r}))}const Me=Object.assign(Pe(),{once:Pe({once:!0}),networkError(e){throw new Le(e)}}),Fe=(e,t)=>a(void 0,void 0,void 0,(function*(){const n=t.filter((e=>!e.shouldSkip)).map((t=>{const n=t.parse?t.parse(e):null;return[t,n]})).filter((([t,n])=>t.predicate(e,n)));if(0==n.length)return{handler:null,response:null};const{requestHandler:r,parsedRequest:i,mockedResponse:o,publicRequest:s}=yield n.reduce(((t,[n,r])=>a(void 0,void 0,void 0,(function*(){const i=yield t;if(i.requestHandler)return i;const{getPublicRequest:o,defineContext:s,resolver:a}=n,c=o?o(e,r):e,u=s?s(c):Ce,l=yield a(c,Me,u);return!l||n.shouldSkip?i:(l&&l.once&&(n.shouldSkip=!0),{requestHandler:n,parsedRequest:r,mockedResponse:l,publicRequest:c})}))),Promise.resolve({mockedResponse:null}));return r?{handler:r,response:o,publicRequest:s,parsedRequest:i}:{handler:null,response:null}}));var Ue=function(){function e(e,t,n,r,i){return e<t||n<t?e>n?n+1:e+1:r===i?t:t+1}return function(t,n){if(t===n)return 0;if(t.length>n.length){var r=t;t=n,n=r}for(var i=t.length,o=n.length;i>0&&t.charCodeAt(i-1)===n.charCodeAt(o-1);)i--,o--;for(var s=0;s<i&&t.charCodeAt(s)===n.charCodeAt(s);)s++;if(o-=s,0===(i-=s)||o<3)return o;var a,c,u,l,p,h,f,d,v,m,y,E,g=0,T=[];for(a=0;a<i;a++)T.push(a+1),T.push(t.charCodeAt(s+a));for(var b=T.length-1;g<o-3;)for(v=n.charCodeAt(s+(c=g)),m=n.charCodeAt(s+(u=g+1)),y=n.charCodeAt(s+(l=g+2)),E=n.charCodeAt(s+(p=g+3)),h=g+=4,a=0;a<b;a+=2)c=e(f=T[a],c,u,v,d=T[a+1]),u=e(c,u,l,m,d),l=e(u,l,p,y,d),h=e(l,p,h,E,d),T[a]=h,p=l,l=u,u=c,c=f;for(;g<o;)for(v=n.charCodeAt(s+(c=g)),h=++g,a=0;a<b;a+=2)f=T[a],T[a]=h=e(f,c,h,v,T[a+1]),c=f;return h}}();function qe(e){const t=function(e){var t;switch(e.method){case"GET":return e.url.searchParams.get("query");case"POST":return"application/json"!==e.headers.get("content-type")?null:null===(t=e.body)||void 0===t?void 0:t.query;default:return null}}(e);return t?function(e){var t;try{const n=Z(e).definitions.find((e=>"OperationDefinition"===e.kind));return{operationType:null==n?void 0:n.operation,operationName:null===(t=null==n?void 0:n.name)||void 0===t?void 0:t.value}}catch(e){return null}}(t):null}function Be(e,t,n="bypass"){if("function"==typeof n)return void n(e);const r=qe(e),i=function(e){return e.reduce(((e,t)=>(e[t.getMetaInfo().type].push(t),e)),{rest:[],graphql:[]})}(t),o=function(e,t,n){return t.reduce(((t,r)=>{const i=n(e,r);return t.concat([[i,r]])}),[]).sort((([e],[t])=>e-t)).filter((([e])=>e<=3)).slice(0,4).map((([,e])=>e))}(e,r?i.graphql:i.rest,r?(s=r,(e,t)=>{if(void 0===s.operationName)return 1/0;const{operationType:n,operationName:r}=t.getMetaInfo(),i=s.operationType===n?.5:0;return Ue(s.operationName,r)-i}):(e,t)=>{const{mask:n,method:r}=t.getMetaInfo();if(n instanceof RegExp)return 1/0;const i=(0,le.i)(e.method,r)?.5:0,o=(0,le.g)(e);return Ue(o,n)-i});var s;const a=o.length>0?function(e){return e.length>1?`Did you mean to request one of the following resources instead?\n\n${e.map((e=>`  • ${e.getMetaInfo().header}`)).join("\n")}`:`Did you mean to request "${e[0].getMetaInfo().header}" instead?`}(o):"",c=(0,le.g)(e),u=["captured a request without a matching request handler:",`  • ${r?`${r.operationType} ${r.operationName} (${e.method} ${c})`:`${e.method} ${c}`}`,a,"If you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/getting-started/mocks"].filter(Boolean).join("\n\n");switch(n){case"error":console.error(`[MSW] Error: ${u}`);break;case"warn":console.warn(`[MSW] Warning: ${u}`);break;default:return}}function He(){return(0,pe.p)(document.cookie)}function $e(e){if(!e.method||!(0,le.i)(e.method,"GET")||""!==e.body)return e.body}function Ke(e){const t={id:e.id,cache:e.cache,credentials:e.credentials,method:e.method,url:new URL(e.url),referrer:e.referrer,referrerPolicy:e.referrerPolicy,redirect:e.redirect,mode:e.mode,params:{},cookies:{},integrity:e.integrity,keepalive:e.keepalive,destination:e.destination,body:$e(e),bodyUsed:e.bodyUsed,headers:new i.H(e.headers)};return t.cookies=function(e){switch(e.credentials){case"same-origin":return location.origin===e.url.origin?He():{};case"include":return He();default:return{}}}(t),t.body=(0,r.p)(t.body,t.headers),t}const Ve={serviceWorker:{url:"/mockServiceWorker.js",options:null},quiet:!1,waitUntilReady:!0,onUnhandledRequest:"bypass",findWorker:(e,t)=>e===t},We=e=>function(t){const n=s(Ve,t||{});e.startOptions=n;const r=(()=>a(this,void 0,void 0,(function*(){if(!("serviceWorker"in navigator))return console.error("[MSW] Failed to register a Service Worker: this browser does not support Service Workers (see https://caniuse.com/serviceworkers), or your application is running on an insecure host (consider using HTTPS for custom hostnames)."),null;e.events.removeAllListeners(),e.workerChannel.on("REQUEST",((e,t)=>(n,r)=>a(void 0,void 0,void 0,(function*(){const o=(e=>{const t=e.ports[0];return{send(e){t&&t.postMessage(e)}}})(n);try{const n=Ke(r.payload);e.emitter.emit("request:start",n);const{response:s,handler:a,publicRequest:c,parsedRequest:u}=yield Fe(n,e.requestHandlers);if(!a)return Be(n,e.requestHandlers,t.onUnhandledRequest),e.emitter.emit("request:unhandled",n),e.emitter.emit("request:end",n),o.send({type:"MOCK_NOT_FOUND"});if(e.emitter.emit("request:match",n),!s)return console.warn("[MSW] Expected a mocking resolver function to return a mocked response Object, but got: %s. Original response is going to be used instead.",s),e.emitter.emit("request:end",n),o.send({type:"MOCK_NOT_FOUND"});const l=Object.assign(Object.assign({},s),{headers:(0,i.h)(s.headers)});t.quiet||setTimeout((()=>{a.log(c,l,a,u)}),s.delay),e.emitter.emit("request:end",n),o.send({type:"MOCK_SUCCESS",payload:l})}catch(e){if(e instanceof Le)return o.send({type:"NETWORK_ERROR",payload:{name:e.name,message:e.message}});o.send({type:"INTERNAL_ERROR",payload:{status:500,body:JSON.stringify({errorType:e.constructor.name,message:e.message,location:e.stack})}})}})))(e,n)),e.workerChannel.on("RESPONSE",function(e){return(t,n)=>{var r;const{payload:i}=n;if(null===(r=i.type)||void 0===r?void 0:r.includes("opaque"))return;const o=new Response(i.body||null,i);"msw"===o.headers.get("x-powered-by")?e.emitter.emit("response:mocked",o,i.requestId):e.emitter.emit("response:bypass",o,i.requestId)}}(e));const[,r]=yield xe((()=>Re(n.serviceWorker.url,n.serviceWorker.options,n.findWorker)));if(!r)return null;const[o,s]=r;if(!o)return(null==t?void 0:t.findWorker)?console.error(`[MSW] Failed to locate the Service Worker registration using a custom "findWorker" predicate.\n\nPlease ensure that the custom predicate properly locates the Service Worker registration at "${n.serviceWorker.url}".\nMore details: https://mswjs.io/docs/api/setup-worker/start#findworker\n`):console.error(`[MSW] Failed to locate the Service Worker registration.\n\nThis most likely means that the worker script URL "${n.serviceWorker.url}" cannot resolve against the actual public hostname (${location.host}). This may happen if your application runs behind a proxy, or has a dynamic hostname.\n\nPlease consider using a custom "serviceWorker.url" option to point to the actual worker script location, or a custom "findWorker" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`),null;e.worker=o,e.registration=s,e.events.addListener(window,"beforeunload",(()=>{"redundant"!==o.state&&e.workerChannel.send("CLIENT_CLOSED"),window.clearInterval(e.keepAliveInterval)}));const[c]=yield xe((()=>function(e,t){return a(this,void 0,void 0,(function*(){e.workerChannel.send("INTEGRITY_CHECK_REQUEST");const{payload:n}=yield e.events.once("INTEGRITY_CHECK_RESPONSE");if("dc3d39c97ba52ee7fff0d667f7bc098c"!==n)throw new Error(`Currently active Service Worker (${n}) is behind the latest published one (dc3d39c97ba52ee7fff0d667f7bc098c).`);return t}))}(e,o)));c&&console.error(`[MSW] Detected outdated Service Worker: ${c.message}\n\nThe mocking is still enabled, but it's highly recommended that you update your Service Worker by running:\n\n$ npx msw init <PUBLIC_DIR>\n\nThis is necessary to ensure that the Service Worker is in sync with the library to guarantee its stability.\nIf this message still persists after updating, please report an issue: https://github.com/open-draft/msw/issues      `);const[u]=yield xe((()=>((e,t)=>a(void 0,void 0,void 0,(function*(){return e.workerChannel.send("MOCK_ACTIVATE"),e.events.once("MOCKING_ENABLED").then((()=>{(null==t?void 0:t.quiet)||(console.groupCollapsed("%c[MSW] Mocking enabled.","color:orangered;font-weight:bold;"),console.log("%cDocumentation: %chttps://mswjs.io/docs","font-weight:bold","font-weight:normal"),console.log("Found an issue? https://github.com/mswjs/msw/issues"),console.groupEnd())}))})))(e,t)));return u?(console.error("Failed to enable mocking",u),null):(e.keepAliveInterval=window.setInterval((()=>e.workerChannel.send("KEEPALIVE_REQUEST")),5e3),s)})))();return n.waitUntilReady&&function(e){const t=window.XMLHttpRequest.prototype.send;window.XMLHttpRequest.prototype.send=function(...n){xe((()=>e)).then((()=>{window.XMLHttpRequest.prototype.send=t,this.send(...n)}))};const n=window.fetch;window.fetch=(...t)=>a(this,void 0,void 0,(function*(){return yield xe((()=>e)),window.fetch=n,window.fetch(...t)}))}(r),r},Ge=e=>function(){var t;e.workerChannel.send("MOCK_DEACTIVATE"),e.events.removeAllListeners(),e.emitter.removeAllListeners(),window.clearInterval(e.keepAliveInterval),(null===(t=e.startOptions)||void 0===t?void 0:t.quiet)||console.log("%c[MSW] Mocking disabled.","color:orangered;font-weight:bold;")};let Ye=[];function Je(...e){e.forEach((e=>{if(Array.isArray(e))throw new Error('[MSW] Failed to call "setupWorker" given an Array of request handlers (setupWorker([a, b])), expected to receive each handler individually: setupWorker(a, b).')}));const t={startOptions:void 0,worker:null,registration:null,requestHandlers:[...e],emitter:new ke.StrictEventEmitter,workerChannel:{on(e,n){t.events.addListener(navigator.serviceWorker,"message",(r=>{if(r.source!==t.worker)return;const o=(0,i.j)(r.data);o&&o.type===e&&n(r,o)}))},send(e){var n;null===(n=t.worker)||void 0===n||n.postMessage(e)}},events:{addListener:(e,t,n)=>(e.addEventListener(t,n),Ye.push({eventType:t,target:e,callback:n}),()=>{e.removeEventListener(t,n)}),removeAllListeners(){for(const{target:e,eventType:t,callback:n}of Ye)e.removeEventListener(t,n);Ye=[]},once(e){const n=[];return new Promise(((r,i)=>{n.push(t.events.addListener(navigator.serviceWorker,"message",(t=>{try{const n=JSON.parse(t.data);n.type===e&&r(n)}catch(e){i(e)}})),t.events.addListener(navigator.serviceWorker,"messageerror",i))})).finally((()=>{n.forEach((e=>e()))}))}}};if((0,i.i)())throw new Error("[MSW] Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for NodeJS environment instead.");return{start:We(t),stop:Ge(t),use(...e){!function(e,...t){e.unshift(...t)}(t.requestHandlers,...e)},restoreHandlers(){t.requestHandlers.forEach((e=>{"shouldSkip"in e&&(e.shouldSkip=!1)}))},resetHandlers(...n){t.requestHandlers=function(e,...t){return t.length>0?[...t]:[...e]}(e,...n)},printHandlers(){t.requestHandlers.forEach((e=>{const t=e.getMetaInfo();console.groupCollapsed(`[${t.type}] ${t.header}`),console.log(`Declaration: ${t.callFrame}`),console.log("Resolver: %s",e.resolver),["rest"].includes(t.type)&&console.log("Match:",`https://mswjs.io/repl?path=${t.mask}`),console.groupEnd()}))},on(e,n){t.emitter.addListener(e,n)}}}},515:function(e,t,n){"use strict";n.d(t,{g:function(){return R},i:function(){return C},r:function(){return P}});var r=n(1174),i=n(5693),o=n(7421),s=(0,o.c)((function(e,t){!function(n){var r=t&&!t.nodeType&&t,i=e&&!e.nodeType&&e,s="object"==typeof o.a&&o.a;s.global!==s&&s.window!==s&&s.self!==s||(n=s);var a,c,u=2147483647,l=36,p=/^xn--/,h=/[^\x20-\x7E]/,f=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},v=Math.floor,m=String.fromCharCode;function y(e){throw RangeError(d[e])}function E(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function g(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+E((e=e.replace(f,".")).split("."),t).join(".")}function T(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function b(e){return E(e,(function(e){var t="";return e>65535&&(t+=m((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=m(e)})).join("")}function N(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function O(e,t,n){var r=0;for(e=n?v(e/700):e>>1,e+=v(e/t);e>455;r+=l)e=v(e/35);return v(r+36*e/(e+38))}function w(e){var t,n,r,i,o,s,a,c,p,h,f,d=[],m=e.length,E=0,g=128,T=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&y("not-basic"),d.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<m;){for(o=E,s=1,a=l;i>=m&&y("invalid-input"),((c=(f=e.charCodeAt(i++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:l)>=l||c>v((u-E)/s))&&y("overflow"),E+=c*s,!(c<(p=a<=T?1:a>=T+26?26:a-T));a+=l)s>v(u/(h=l-p))&&y("overflow"),s*=h;T=O(E-o,t=d.length+1,0==o),v(E/t)>u-g&&y("overflow"),g+=v(E/t),E%=t,d.splice(E++,0,g)}return b(d)}function _(e){var t,n,r,i,o,s,a,c,p,h,f,d,E,g,b,w=[];for(d=(e=T(e)).length,t=128,n=0,o=72,s=0;s<d;++s)(f=e[s])<128&&w.push(m(f));for(r=i=w.length,i&&w.push("-");r<d;){for(a=u,s=0;s<d;++s)(f=e[s])>=t&&f<a&&(a=f);for(a-t>v((u-n)/(E=r+1))&&y("overflow"),n+=(a-t)*E,t=a,s=0;s<d;++s)if((f=e[s])<t&&++n>u&&y("overflow"),f==t){for(c=n,p=l;!(c<(h=p<=o?1:p>=o+26?26:p-o));p+=l)b=c-h,g=l-h,w.push(m(N(h+b%g,0))),c=v(b/g);w.push(m(N(c,0))),o=O(n,E,r==i),n=0,++r}++n,++t}return w.join("")}if(a={version:"1.3.2",ucs2:{decode:T,encode:b},decode:w,encode:_,toASCII:function(e){return g(e,(function(e){return h.test(e)?"xn--"+_(e):e}))},toUnicode:function(e){return g(e,(function(e){return p.test(e)?w(e.slice(4).toLowerCase()):e}))}},r&&i)if(e.exports==r)i.exports=a;else for(c in a)a.hasOwnProperty(c)&&(r[c]=a[c]);else n.punycode=a}(o.a)})),a=function(e){return"string"==typeof e},c=function(e){return"object"==typeof e&&null!==e},u=function(e){return null===e},l=function(e){return null==e};function p(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var h=function(e,t,n,r){t=t||"&",n=n||"=";var i={};if("string"!=typeof e||0===e.length)return i;var o=/\+/g;e=e.split(t);var s=1e3;r&&"number"==typeof r.maxKeys&&(s=r.maxKeys);var a=e.length;s>0&&a>s&&(a=s);for(var c=0;c<a;++c){var u,l,h,f,d=e[c].replace(o,"%20"),v=d.indexOf(n);v>=0?(u=d.substr(0,v),l=d.substr(v+1)):(u=d,l=""),h=decodeURIComponent(u),f=decodeURIComponent(l),p(i,h)?Array.isArray(i[h])?i[h].push(f):i[h]=[i[h],f]:i[h]=f}return i},f=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}},d=function(e,t,n,r){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(r){var i=encodeURIComponent(f(r))+n;return Array.isArray(e[r])?e[r].map((function(e){return i+encodeURIComponent(f(e))})).join(t):i+encodeURIComponent(f(e[r]))})).join(t):r?encodeURIComponent(f(r))+n+encodeURIComponent(f(e)):""},v=(0,o.c)((function(e,t){t.decode=t.parse=h,t.encode=t.stringify=d})),m=function(e){a(e)&&(e=S(e));return e instanceof y?e.format():y.prototype.format.call(e)};function y(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var E=/^([a-z0-9.+-]+:)/i,g=/:[0-9]*$/,T=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,b=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),N=["'"].concat(b),O=["%","/","?",";","#"].concat(N),w=["/","?","#"],_=/^[+a-z0-9A-Z_-]{0,63}$/,I=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,A={javascript:!0,"javascript:":!0},k={javascript:!0,"javascript:":!0},x={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function S(e,t,n){if(e&&c(e)&&e instanceof y)return e;var r=new y;return r.parse(e,t,n),r}y.prototype.parse=function(e,t,n){if(!a(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var r=e.indexOf("?"),i=-1!==r&&r<e.indexOf("#")?"?":"#",o=e.split(i);o[0]=o[0].replace(/\\/g,"/");var c=e=o.join(i);if(c=c.trim(),!n&&1===e.split("#").length){var u=T.exec(c);if(u)return this.path=c,this.href=c,this.pathname=u[1],u[2]?(this.search=u[2],this.query=t?v.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var l=E.exec(c);if(l){var p=(l=l[0]).toLowerCase();this.protocol=p,c=c.substr(l.length)}if(n||l||c.match(/^\/\/[^@\/]+@[^@\/]+/)){var h="//"===c.substr(0,2);!h||l&&k[l]||(c=c.substr(2),this.slashes=!0)}if(!k[l]&&(h||l&&!x[l])){for(var f,d,m=-1,y=0;y<w.length;y++){-1!==(g=c.indexOf(w[y]))&&(-1===m||g<m)&&(m=g)}-1!==(d=-1===m?c.lastIndexOf("@"):c.lastIndexOf("@",m))&&(f=c.slice(0,d),c=c.slice(d+1),this.auth=decodeURIComponent(f)),m=-1;for(y=0;y<O.length;y++){var g;-1!==(g=c.indexOf(O[y]))&&(-1===m||g<m)&&(m=g)}-1===m&&(m=c.length),this.host=c.slice(0,m),c=c.slice(m),this.parseHost(),this.hostname=this.hostname||"";var b="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!b)for(var S=this.hostname.split(/\./),R=(y=0,S.length);y<R;y++){var C=S[y];if(C&&!C.match(_)){for(var L="",D=0,j=C.length;D<j;D++)C.charCodeAt(D)>127?L+="x":L+=C[D];if(!L.match(_)){var P=S.slice(0,y),M=S.slice(y+1),F=C.match(I);F&&(P.push(F[1]),M.unshift(F[2])),M.length&&(c="/"+M.join(".")+c),this.hostname=P.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),b||(this.hostname=s.toASCII(this.hostname));var U=this.port?":"+this.port:"",q=this.hostname||"";this.host=q+U,this.href+=this.host,b&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==c[0]&&(c="/"+c))}if(!A[p])for(y=0,R=N.length;y<R;y++){var B=N[y];if(-1!==c.indexOf(B)){var H=encodeURIComponent(B);H===B&&(H=escape(B)),c=c.split(B).join(H)}}var $=c.indexOf("#");-1!==$&&(this.hash=c.substr($),c=c.slice(0,$));var K=c.indexOf("?");if(-1!==K?(this.search=c.substr(K),this.query=c.substr(K+1),t&&(this.query=v.parse(this.query)),c=c.slice(0,K)):t&&(this.search="",this.query={}),c&&(this.pathname=c),x[p]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"";var V=this.search||"";this.path=U+V}return this.href=this.format(),this},y.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&c(this.query)&&Object.keys(this.query).length&&(o=v.stringify(this.query));var s=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||x[t])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),t+i+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+r},y.prototype.resolve=function(e){return this.resolveObject(S(e,!1,!0)).format()},y.prototype.resolveObject=function(e){if(a(e)){var t=new y;t.parse(e,!1,!0),e=t}for(var n=new y,r=Object.keys(this),i=0;i<r.length;i++){var o=r[i];n[o]=this[o]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var s=Object.keys(e),c=0;c<s.length;c++){var p=s[c];"protocol"!==p&&(n[p]=e[p])}return x[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!x[e.protocol]){for(var h=Object.keys(e),f=0;f<h.length;f++){var d=h[f];n[d]=e[d]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||k[e.protocol])n.pathname=e.pathname;else{for(var v=(e.pathname||"").split("/");v.length&&!(e.host=v.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==v[0]&&v.unshift(""),v.length<2&&v.unshift(""),n.pathname=v.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var m=n.pathname||"",E=n.search||"";n.path=m+E}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var g=n.pathname&&"/"===n.pathname.charAt(0),T=e.host||e.pathname&&"/"===e.pathname.charAt(0),b=T||g||n.host&&e.pathname,N=b,O=n.pathname&&n.pathname.split("/")||[],w=(v=e.pathname&&e.pathname.split("/")||[],n.protocol&&!x[n.protocol]);if(w&&(n.hostname="",n.port=null,n.host&&(""===O[0]?O[0]=n.host:O.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===v[0]?v[0]=e.host:v.unshift(e.host)),e.host=null),b=b&&(""===v[0]||""===O[0])),T)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,O=v;else if(v.length)O||(O=[]),O.pop(),O=O.concat(v),n.search=e.search,n.query=e.query;else if(!l(e.search)){if(w)n.hostname=n.host=O.shift(),(R=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=R.shift(),n.host=n.hostname=R.shift());return n.search=e.search,n.query=e.query,u(n.pathname)&&u(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!O.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var _=O.slice(-1)[0],I=(n.host||e.host||O.length>1)&&("."===_||".."===_)||""===_,A=0,S=O.length;S>=0;S--)"."===(_=O[S])?O.splice(S,1):".."===_?(O.splice(S,1),A++):A&&(O.splice(S,1),A--);if(!b&&!N)for(;A--;A)O.unshift("..");!b||""===O[0]||O[0]&&"/"===O[0].charAt(0)||O.unshift(""),I&&"/"!==O.join("/").substr(-1)&&O.push("");var R,C=""===O[0]||O[0]&&"/"===O[0].charAt(0);w&&(n.hostname=n.host=C?"":O.length?O.shift():"",(R=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=R.shift(),n.host=n.hostname=R.shift()));return(b=b||n.host&&O.length)&&!C&&O.unshift(""),O.length?n.pathname=O.join("/"):(n.pathname=null,n.path=null),u(n.pathname)&&u(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},y.prototype.parseHost=function(){var e=this.host,t=g.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)};const R=e=>e.referrer.startsWith(e.url.origin)?e.url.pathname:m({protocol:e.url.protocol,host:e.url.host,pathname:e.url.pathname});function C(e,t){return e.toLowerCase()===t.toLowerCase()}var L;!function(e){e.HEAD="HEAD",e.GET="GET",e.POST="POST",e.PUT="PUT",e.PATCH="PATCH",e.OPTIONS="OPTIONS",e.DELETE="DELETE"}(L||(L={}));const D={set:r.a,status:r.s,cookie:i.c,body:i.b,text:i.t,json:r.b,xml:i.x,delay:r.d,fetch:r.f},j=e=>(t,n)=>{const r=(0,o.g)(t),i=(0,o.b)();return{parse:e=>({match:(0,o.m)(e.url,t)}),predicate:(t,n)=>C(e,t.method)&&n.match.matches,getPublicRequest(e,n){const r=t&&n.match.params||{};return Object.assign(Object.assign({},e),{params:r})},resolver:n,defineContext:()=>D,log(n,i,s){if(r instanceof URL&&""!==r.search){const n=[];r.searchParams.forEach(((e,t)=>n.push(t))),console.warn(`[MSW] Found a redundant usage of query parameters in the request handler URL for "${e} ${t}". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${e.toLowerCase()}("${r.pathname}", (req, res, ctx) => {\n  const query = req.url.searchParams\n${n.map((e=>`  const ${e} = query.get("${e}")`)).join("\n")}\n})`)}const a=R(n),c=(0,o.d)(n),u=(0,o.e)(i);console.groupCollapsed("[MSW] %s %s %s (%c%s%c)",(0,o.f)(),n.method,a,`color:${(0,o.h)(i.status)}`,i.status,"color:inherit"),console.log("Request",c),console.log("Handler:",{mask:t,resolver:s.resolver}),console.log("Response",u),console.groupEnd()},getMetaInfo:()=>({type:"rest",header:`${e} ${t.toString()}`,mask:t,callFrame:i,method:e})}},P={head:j(L.HEAD),get:j(L.GET),post:j(L.POST),put:j(L.PUT),delete:j(L.DELETE),patch:j(L.PATCH),options:j(L.OPTIONS)}},5693:function(e,t,n){"use strict";n.d(t,{b:function(){return p},c:function(){return l},p:function(){return r},t:function(){return h},x:function(){return f}});var r=function(e,t){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var n={},r=t||{},i=e.split(a),s=r.decode||o,c=0;c<i.length;c++){var l=i[c],p=l.indexOf("=");if(!(p<0)){var h=l.substr(0,p).trim(),f=l.substr(++p,l.length).trim();'"'==f[0]&&(f=f.slice(1,-1)),null==n[h]&&(n[h]=u(f,s))}}return n},i=function(e,t,n){var r=n||{},i=r.encode||s;if("function"!=typeof i)throw new TypeError("option encode is invalid");if(!c.test(e))throw new TypeError("argument name is invalid");var o=i(t);if(o&&!c.test(o))throw new TypeError("argument val is invalid");var a=e+"="+o;if(null!=r.maxAge){var u=r.maxAge-0;if(isNaN(u)||!isFinite(u))throw new TypeError("option maxAge is invalid");a+="; Max-Age="+Math.floor(u)}if(r.domain){if(!c.test(r.domain))throw new TypeError("option domain is invalid");a+="; Domain="+r.domain}if(r.path){if(!c.test(r.path))throw new TypeError("option path is invalid");a+="; Path="+r.path}if(r.expires){if("function"!=typeof r.expires.toUTCString)throw new TypeError("option expires is invalid");a+="; Expires="+r.expires.toUTCString()}r.httpOnly&&(a+="; HttpOnly");r.secure&&(a+="; Secure");if(r.sameSite){switch("string"==typeof r.sameSite?r.sameSite.toLowerCase():r.sameSite){case!0:a+="; SameSite=Strict";break;case"lax":a+="; SameSite=Lax";break;case"strict":a+="; SameSite=Strict";break;case"none":a+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}}return a},o=decodeURIComponent,s=encodeURIComponent,a=/; */,c=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function u(e,t){try{return t(e)}catch(t){return e}}const l=(e,t,n)=>r=>{const o=i(e,t,n);return r.headers.set("Set-Cookie",o),"undefined"!=typeof document&&(document.cookie=o),r},p=e=>t=>(t.body=e,t),h=e=>t=>(t.headers.set("Content-Type","text/plain"),t.body=e,t),f=e=>t=>(t.headers.set("Content-Type","text/xml"),t.body=e,t)},3300:function(e,t){"use strict";var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,